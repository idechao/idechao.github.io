<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[charles抓包https显示unknown问题解决]]></title>
    <url>%2F2020%2F07%2F08%2Fweb%2Fcharles-https%2F</url>
    <content type="text"><![CDATA[抓包前的工作，就不做详细介绍了， 网上有一大堆。这里主要记录下，我抓包的时候，一直显示unknown的原因。 问题描述： 按照网上的教程，比如 Charles抓包https完整的配置完之后，charles一直显示unknown，无法显示。 解决： 在安装手机证书的时候，charles有提示，如下图： 就是说，安装的时候，需要链接到charles的代理上，也就手机端访问chls.pro/ssl之前，需要先链接到charles的代理才可以，手机上的证书需要和电脑端匹配才行的。 如此简单的操作，如此粗浅的逻辑，实在是。。。不应该]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端学习路线]]></title>
    <url>%2F2020%2F07%2F06%2Fweb%2Fh5-study-route%2F</url>
    <content type="text"><![CDATA[从我学习的过程中，遇到的难点，已经学习经历，总结下应该学习的知识点。 npm npm中文网 基本的介绍，安装，命令大全，开始时不建议看，可能突然看到这么多，并没有什么重点，大致过一下，有点印象就行，知道有这么个东西，具体使用的时候可以自行百度去查具体实现。 觉得熟悉后，可以当做字典来用。 Node.js 进阶-你应该知道的 npm 知识都在这！ 掘金上的一片介绍文章，有基本的介绍说明，常用的文件的理解等，比较好的一篇文章。 npm scripts 使用指南 阮老师的进阶文章，脚本是npm最强打的功能之一。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Visual Paradigm绘制流程图、时序图.md]]></title>
    <url>%2F2020%2F01%2F09%2Ftools%2FVisual-Paradigm%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%97%B6%E5%BA%8F%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[开发过程中，需要绘制各种流程图、时序图等，网上也有很多软件，不过使用下来，感觉功能最强大的，就是 Visual Paradigm。 下面介绍基本的入门操作。 切换语言默认下载下来，是英文版的。想我这种勉强能说个 ”Hello World“ 的人来说还是有点难受的。软件本身支持语言的切换，无需下载插件。 先说下主流程： Window–&gt;Application Options–&gt;Appearance–&gt;User language–&gt;Simplified Chinese. 选中application options： 切换语言： 然后点击应用，重启，展示中文，完美~~ 创建流程图点击最左边的按钮，”图标总管“， 竖着排列的那些，然后选择Flowchart，选择Basic Flowchart。 或者参照下图，直接搜索 flowchart: 导出保存问题正常保存，可以导出为 .vpp 文件。 导入的时候，得从上面选择导入，不能直接拖拽进来。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Visual Paradigm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小狗钱钱]]></title>
    <url>%2F2019%2F12%2F27%2Fbooks%2F%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;小狗钱钱是一本理财类的书，讲的主人公是个小孩子，在生活中，陷入财务危机，这个说的有点严重，应该说是缺钱了。然后收留了一直小狗，取名钱钱，小狗钱钱会说话，然后教会了主人公理财的方法。逐渐的，主人公的钱袋子就逐渐丰厚起来。 &nbsp;&nbsp;&nbsp;&nbsp;对于感想，写下总结内容。想到哪写到哪，没有一定的顺序。 &nbsp;&nbsp;&nbsp;&nbsp;需要把资金进行管理。50%放入生蛋的”鹅”中，20%和20%放入梦想储蓄罐，剩余10%，当做自由资金。 &nbsp;&nbsp;&nbsp;&nbsp;炒股是个正确的选择，每次收益，对收益部分做部分调整。大部分拿到另个一个账户，用户短线处理，大胆，果断，不犹豫，不纠结。再拿出一小部分，放到投入到基金中。其实我不是很喜欢基金，但是为了分散一部分风险，还是持续增加一下。 &nbsp;&nbsp;&nbsp;&nbsp;要坚持写成功笔记。这是一个很重要的习惯。我现在就是习惯写博客，包括技术博客，股票投资记录，读书笔记等。而且要习惯把日常的东西记录下来，没准儿偶尔飘过的想法也会产生很大的作用。 &nbsp;&nbsp;&nbsp;&nbsp;要勇于尝试。小女孩敢在学校做演讲，没准现在的我在那么多人面前都不会那么从容淡定。包括现在在学的新技术，在开始的时候一个脑袋两个大，多练习之后，也会逐渐找到自信，熟能生巧，讲究的就是量变到质变的一个过程。 &nbsp;&nbsp;&nbsp;&nbsp;持续学习股票知识。虽然在投资股票，但是现在并没有一套自己的理论，大多数在抄作业。虽然这也能获取一部分利润，但是在自己掌握的情况下，可能会产生更好的收益。 &nbsp;&nbsp;&nbsp;&nbsp;72小时原则。想好了一件事情之后，要在72小时内完成，否则这件事情，有很大的概率不会去做了。比如想写个博客，然后想了想去玩了把游戏，推来推去的，这篇幅博客基本就写不成了。举个我的实际例子，想到出去旅行，兴致勃勃，但是没能及时买票做攻略，到后来就不了了之了。 &nbsp;&nbsp;&nbsp;&nbsp;最好不要使用信用卡。我现在也很少使用信用卡，基本都解绑了，只留着晚上打车的的费用使用信用卡，或者大额的情况下，因为信用卡的权益部分还是不错的，但是每个月结束，都会去查看账单，去对一下。 &nbsp;&nbsp;&nbsp;&nbsp;理财真的很重要，收入越高的人，消费也会跟着升级，没有达到一定程度，也是会资金紧张的。我有个朋友，年入也是百万的，也经常跟别人借钱，当然，他也是有能力还上去的。这里只是说明一些，理财应该在普遍的环境中]]></content>
      <categories>
        <category>books</category>
      </categories>
      <tags>
        <tag>理财书籍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode使用]]></title>
    <url>%2F2019%2F12%2F19%2Ftools%2FVSCode%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[vscode是一个强大的编辑器。发现之后，就对其他编辑器没有什么想法了。 下面就记录下来常用的一些操作和配置的东西。 vscode介绍知乎上有vscode的一篇介绍，Visual Studio Code有哪些工程方面的亮点，值得阅读。 快捷键设置编辑器操作: 隐藏左边目录栏 command + b 显示隐藏终端 control + ` 文件操作: 注释，使用 command + / 可以把选中的行都注释掉 [ ] 注释，使用 shift + alt + a 可以把选中的内容注释掉 上面两个注释的区别就是，当选中的内容不是完整的两行的情况下，第一个会把两行都注释掉，第二个只会注释选中的内容 [ ] 上下移动行 alt + up/down 复制当前行 shift + alt + up/down 删除当前行 command + shift + k]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[股票投资实录]]></title>
    <url>%2F2019%2F12%2F12%2Fstock%2F%E8%82%A1%E7%A5%A8%E6%8A%95%E8%B5%84%E5%AE%9E%E5%BD%95%2F</url>
    <content type="text"><![CDATA[输入密码，查看文章 a54a2cbf1c08c076e56153d9cabc95f928562e6200bd68ff4e9aa780f57a562cf748a81e24480d52b0b1d2761d45513d5bd912d20981b63be3dc6ca9cd5946064122c57f5a3f438c9db42dc7e49b251f6387f96eef45e4d3a671ecc12964049bf10e1dda12b2216678931fb6f7f0e333e31b4be056416c3438a64c9f561eaa8b6a1fbc2cbb47d5d6a5e385a9db884e800dc2e0ded1c1dcdf2d60f4c4a95451813d0abbce228d8cdf085cf1b31790d77af07432ca1348b22e75fdea68f83cf1fa1799248a980236340186be01a0c1aedd8e34dc5b0f706d695763b5c616c8de4fa53e929ab44be29d4a07000e410609b309a5041a730a2b02879b87728643303f81542e161f0d6f68252a115e8b08595dccbccc94f1749c11b246b863ebd9734083cb22b3d860f7010aedc0cac2f42bbc1cb81874b2990bbe6225ff0a85035e8688643376a14e8655c0920d1550352b5c2c8c9a4b44046a05d4ad1fce8301670eed5d4820bb6680e19bf9cd07cdc10e8bbff694fea16306470b32937b632036658c6f16ac786d11066cd637dadb69509a84bce02c043c8210e4dbe8e6b7d74c9d5718362aa4b67c4760793b8f791f69caf9d1e3b61a1391f24f467d657ecd32553440361fe056a08c99f0a276d1ba6cb197031a13425c9558115ea02558772ae2f94ee1d45c23e4e677e245fc1a3d90947e9f99110f82eef804ba05af8c06fde1cd07cd169460bb252bd9ce057d41c1247e21923aadef1350955aee9f980be59bd0055cd587ac3c53b1804137d6c56816c482556ff51d6a408d985b53d3ed689c6bdcf46932c201101650869b08a80bef9bc2459aa7b76c706461e7ff77b5677f9c4263f59d39e176f2300414c75cbc18c5583a19078e45171e45c40edbb0029f84b357fcb9754e14b5530bc569a7eb27318269d72dc1143b1a4388bbed0856a8208acfda6ed901368b2e62f330cb37f72761446b764b7a7a9986d5425f1aa77fad7c17aa408ef599a2cbaaed08cb08973abed37caf856f4aca84c9e092bcddfee8bfdb3d54ccf9e0fd1e7306a103515bbe181b63021d20c9f458183d4092e1e244c41a0eacf3e0f6cc90976e0a4e5f1b93f0848189ba25e47764108ef025103f95ad497eff6564e2e161ad3cd0c264ff4295472c56cc68025c0197f150b869f7d5c86dd2c6294033b373c40203f85c06a02c6ba94265bfc62a9752a66a990510674020360dca352af90ed3adfffc39d45e24fda992ecdd18bdff043ed457aae46a265ab42d149e7da361b097107150880304cc0f99adfe873355ec82117cc500cf03dc6761492534b7e668ab9e458998bff7de305a013596e2476e8c05563fccba087ec51a5a35f904861ba6a752cdc11843138e063bbd6edd827378224d1f85f63727b2977896d771f1da25bb2df642f3d0f84ba6a7840e9a132ad7a136242495d24a9f3d422e39cf652ed19df233e7579144d7adf7ce911597c6bf63b2d928fe7e4c4c0758add3a57c105fde252ed8ae899b8f3acde073d30756fa098fdcfd6d4fa440b82ebf4004bb696803ecda745ac83ea7be4be23006e4634436faf555d5b1a26c2493d390c65ab6863cb663a98bc0fae5d4fd8d39c8feef0b76f3f992c3942ed31b601f92a9de7bb0686fdf024cf22a25cb43e169b692d4feb88972b9514131900a40e00d03eb91b8ddc1a76efff76bda1e22898dcd10d45a0c6bf570f1e9b3ed89a2eb4745fb5979b25e65e4b632cd71dafc6149831fa08abc16077fd99be1581625f036f5b6a1813ea196e8cab1251585c2f4a74121928a904247ea7d899e9625c84d41c49c2c17a3906f35a5428a26bbbe4c7d9a6eb059e75758a3e90ef6d503fd19298ff77d4baa3767e248f2dbd49fc53700ea9f681fee27ad9855f1e7997d4349f72383d0a0d113f4e4d4cac84de54f37319a3c83a4ef36e9ddf0ffe4897415d8ff4e962ad0133054d298430e42518b22023d80ab007fa5b21d095bebebcbda28230dd492f6a4fc01bb5c58663d31c3af897ae7415f1e8fe289a911e8c040fe190c312735d8747eb338a0c46219ac84b15c153b57e5a9e69f499d6739b4de50d9dbfe15c5317d8c3416be108d8b8f7761f225c8603abe9517d6dfe55c4e9a9fc529049b59414e8564eef6c495bf061bf221f197286fcb6a3c2a3eb13cb2098bac631aa4d64502b0c6c8ac115e07cbc29d734403cb6c2be41668e713938210ef974196a57f82dd10037e65227b71678efe106dc33dbc958da77cb73b5ca4009f1a2f7b3247cdf2782bc40dc65242ccb9ac8507705f19b2ff1dffbda37137b32f64e3693ad5e4a7b91a92ad84e11993e2c4b273353212852cb38745aeb567da928f25023401b504085ec4b7c4c135e6318dc9d7fa6af5fa8dc4c86c6225ea6c8622141505bc572a4ecce110a2043e8dacb637de0f8d56d607dc62d25d4e3d4949807d563a10afefa27cd2f14941c6c9c10d39dff5081cefb2b5138e42ca8685ae1eecfc9506c6823bde25e944859659df6846bf797ab498a5cb37aabd5c946035677a3c0b437efdefbfc22d28ad1e2cc375204658bd39ab33e32294c9692e3931d33e645f7d8e408a37aa39c249ce1e3a38da175b8c0109347697bed62dc4b7d683553fccf0a96d587f254346c40442ff7ed5f05a6ca631ff80fe0ab487c25536b0f7063ee88323b0e1f0be6418456642866c818507336df0e7e502769f51035236120860fc710732c19e67a5f6c2852db1f70da5d067529e383eed228ea4626b56d12d026c459c6317fe95d70f0a2f9c8f1ad55eb905c34bc4e0dc10a7778cbf5031cf55c74580900fa79b5ffb86591a01c143d1b2b09fe68cec6329d60e24884a14ee6ac6c85a277265b3243610d458c5e9bafb4de64cc22ee3a6130ec099cbbdda12009af331b09ca313f0e98117ebd0dadfdce8724cd0c162b97f906231eabc7f84a6b0b82a831ef854b51102c71c6b3c78691dadc00841fd460fe44d21f2bd401e4946bedf625179e7582bc51d902d864b60d83842231371d9ed0d0a4b0c2a44a3dd337a50b1084c47a5dc1ed38e9dea9d05ecfc051e23a2929f88aa80262e6dc1ab8ece954fb4c50c8678ba0a188b153d4c5bc035b5a4b2d4d75d7bc3cebb66a0a32112e78789a2bfe4f4fe091717ef01deea2d8beeb48df754db9237f355d43afc6dc113b310feb53dd3b4d2a1855e37b5ee3308f5b92cb0fde63cc8e79100e398db5051d3904a4e13642b729c266148ea71b2ead72a500fdd9b8d6c193b7386c652ecaf8ec9497eb52b7e52249a2ebed5c8eeee3e0fdcc94118c799a15a5a2d6196fe9b15d53785a77587067ea65adbf6097562c508d3b634abdb2e452dee794ae7c775c6992b0a83943eec8249c70f604b47469adb5d21e339005a260b9f1055f1f0bbd338abd5652afece2538736bac331685752dd00660cc2a6ae42f12357b8de70a7644afd9c109dc006278ba9cdfd8600033fb2a7ae094c4ce251c88dd161e5ed9c72c921a8155fbc7f94e34e7205248fb808475a278f4e8bb6dde487e0f1d4c1150ad619712a893a8288932eb93e3753158e25dfd92cf16a851094faf99ddbb1baacd339a622e971620f928dafb0d7abbb650a11abb444d82e01718834dcf807cd58af5989bbfba6dc35d23c291fd660fd014135337e1e0d5a5e7dd45f745a6525822c545a0cb25ff2c100bd9eb2506fc9517765da52cb628ec6d2e3f0615f476802a0e647dbf41e3fa7558da36f0abcabd296cd471a34dd43f46ec62d4a4e65e7a748e27ed7ce131c5d90734ddfa902a6644e8b5f704a109b7645f6e0ce0d381d92295835960227671aa0369abbf9547254adf37d817b918e12e050855918084fee4ebfa0da0891c909ae029d406ed9c786f571ee6c1cd5b4933a96ccf1de42ff5810dfdfbfd266f5cd8fb559efb07eb0aa5f61ccfd70e46ea32db2113ee2b296394ab9325a2afd2c1b7257f502cb30d8bbf51d24ed352fdbd69cef7dfef1bbab09501ebb7d39b4e3a93082872bc5e2402ac1f6562ceeff98d64cf3524e654aa6be92036cef5c3f517d31db1bd6d11d26c4af9f2c545757ba3164fdb8420ea8118d5c1c3e5e1525557d0424fb4fb480e79bf34590664d2ce15f363c223efa79b085f184476e32d37d3f2c5a505a4979efca2169a38ce9f8b42de542d943013d6772d636e1c9a9257263a874e05eda95bb935e42bd2f34d98944a6ea20313d46cbc6a051f9e500cf27207c79ac7a0fd822af0bca14b9536b9387eee57e5f86610d091c3c49a4c62be30b39416bce96ea6f6260a8e66875b7a3e70952cd078399e1c8aa0e878f4c6314a28b107328691e0c753fa6134342621e59e0006386289a51cfcba5de31fb54aa4c5b1c6f03bf7990cbfd2fc97af82c15f5cc4bec51c37fa130eff38f382c7ba280928a00a49da0589dff9716a54ca5d56c784f521fde9ebac25db8da8e2159a8a6a5ee19c3c03a077363a0de5b85691a5cd87f0dd5215916924f97aabcb534bf6ce22fe2364abf5c3d2faa2e9fd2435d1bef36b6e4e638d3c0db2316cc6180eb1371b524b0726e8aa1a9bcafcfbfbd63da09fb4164378f7483dd99ca0f70a9e09f675468e594f3fad204b53c9dddabbd6f0449892eea2a32f6eeb0e9bb4fa5e8d997923512ba75a212f042eb3f8bb3bf9a77371754bd4e9c787d430fcffbdb628f24564343263267ebeb0a69772314c510a745c55a1e2e9ccb6d350568265b252698af48415c8f8c8583cfeb71da586b80475ee135c36c6665f511a67129f759d9c802f8349112ade1430ed4973c5e017d3b525fa86f6d232d357c763e37ab47c8d551958fbb7a23f16771f0c62324729efb22624d35ae6779ed6285f6b6a35e098d96b7da87408a93cc844003f42e812eddecbc11dad3def88defd193019fa65936795af90a7afe8f04157b6c7f16774d3739925d21dd4558e37cb4c5af80cbb7845d15daa3f03356af2e8d55f3c38df062cd8fc9bfc03a6e3beaa2d5951dc50e054a653353ca5039b33]]></content>
      <categories>
        <category>投资理财</category>
      </categories>
      <tags>
        <tag>股票</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css常见问题小记]]></title>
    <url>%2F2019%2F12%2F09%2Fweb%2Fcss-normal-question%2F</url>
    <content type="text"><![CDATA[css日常开始时，遇到的问题，通过搜索找到的答案，做下总结。 less参考less &amp;符号解释举例： 123456789101112131415.head&#123; height: 100px; width: 100px; border: 1px solid gainsboro; background-color: #000000; .content&#123; background-color: #fff; &#125; &amp;.body&#123; background-color: #72cc26; &#125;&#125; 编译之后： 123456789101112.head &#123; height: 100px; width: 100px; border: 1px solid gainsboro; background-color: #000000;&#125;.head .content &#123; background-color: #fff;&#125;.head.body &#123; background-color: #72cc26;&#125; 这里我们可以看到在类前面添加了&amp;之后，编译之后的css变为且的关系，而没有使用&amp;的css是父子的关系。 这里需要注意.a.b和.a .b之间的区别，.a.b 是且的关系意思就是2者必须都具备，而.a .b是上下级，父子关系: 123456&lt;!--.a.b--&gt;&lt;div class=&quot;a b&quot;&gt;&lt;/div&gt;&lt;!--.a .b--&gt;&lt;div class=&quot;a&quot;&gt; &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;&lt;/div&gt; 类选择器的方式 后代选择器, E1 E2, 选择所有被E1包含的E2。中间用空格分隔。匹配那些由第一个元素作为祖先元素的所有第二个元素(后代元素) ,不需要相匹配元素之间要有严格的父子关系 p,h2,h1, 将同样的定义应用于多个选择符 子元素选择器, X&gt;Y, ,只会匹配那些作为第一个元素的直接后代(子元素)的第二元素 .a.b，就是2者必须都具备，&lt;div class=&quot;a b&quot;&gt;&lt;/div&gt; flex布局汇总参考链接：知乎： https://zhuanlan.zhihu.com/p/25303493 阮一峰总结：https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html 容器上的属性 flex-direction：决定主轴的方向(即项目的排列方向)，默认值：row，主轴为水平方向，起点在左端。 flex-wrap：决定容器内项目是否可换行 flex-flow：flex-direction 和 flex-wrap 的简写形式 justify-content：定义了项目在主轴的对齐方式。 align-items：定义了项目在交叉轴上的对齐方式 align-content：定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用 item上的属性，子元素 order：定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0 flex-basis：定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间；当主轴为水平方向的时候，当设置了 flex-basis，项目的宽度设置值会失效，flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。 flex-grow：定义项目的放大比例 flex-shrink：定义了项目的缩小比例 flex：flex-grow, flex-shrink 和 flex-basis的简写。快捷键如下： flex: auto (1 1 auto) flex: none (0 0 auto) flex: 1； flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，意思就是剩余元素撑满空间 flex: 0；对应的三个值分别为 0 1 0% flex: 0%; flex: 24px; 当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字） 文本一行，超出显示…效果如下图： 做 Web 开发的同学应该比较熟悉 Postman ，一个 HTTP API 测试工具。它是一个基于 Electron 开发的客户端软件，支持 OSX，Window 和 Linux。Postman 功能非常强大，支持 REST，SOAP 和 GraphQL 请求，可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等。总之，对开发 Web API 来说，Postman 是一个非常好的工具。 实例代码如下： 1234567891011121314151617181920&lt;!-- div元素 --&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;content&quot;&gt; 做 Web 开发的同学应该比较熟悉 Postman ，一个 HTTP API 测试工具。它是一个基于 Electron 开发的客户端软件，支持 OSX，Window 和 Linux。Postman 功能非常强大，支持 REST，SOAP 和 GraphQL 请求，可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等。总之，对开发 Web API 来说，Postman 是一个非常好的工具。 &lt;/div&gt;&lt;/div&gt;&lt;!-- less语法如下 --&gt;.container &#123; display: flex; .content &#123; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; display: block; &#125;&#125; 其中，content标签里的前三个是必须的。 虽然有时候测试的时候，hidden不写也生效了，但是规范一些，还是需要增加上。 display: block;这个，最好也是增加上，在不生效的情况，应该增加这个属性。 文本两行123456overflow: hidden;text-overflow: ellipsis;display: -webkit-box;-webkit-line-clamp: 2;（行数）-webkit-box-orient: vertical;max-height: 100px; 参照上面的代码，最大高度自己适配。 其中，上述代码在小程序中，只能使用view控件，不能使用text控件 list文本在一行，超出不展示 设置高度固定 设置flex-wrap: wrap; 貌似无需设置overflow: hidden; 设置两个视图顶部对齐比如a需要设置顶部和b对齐，但是b的高度是自动撑开的，不知道本身的高度。 这时候就可以在外面再包一层，然后a和b都设置为absolute，这样顶部就可以对齐了。 文本垂直居中这个方法只能将单行文本置中。只需要简单地把 line-height 设置为那个对象的 height 值就可以使文本居中了。 1&lt;div id=&quot;content&quot;&gt; Content here&lt;/div&gt; 1234#content &#123; height: 100px; line-height: 100px;&#125; 优点： 适用于所有浏览器 无足够空间时不会被截断 缺点： 只对文本有效(块级元素无效) 多行时，断词比较糟糕 这个方法在小元素上非常有用，例如使按钮文本或者单行文本居中。 设置sticky类型,居顶固定定位是将某个元素固定在浏览器的某个确定的位置，不随滚动条的移动而变化； 注意：固定定位的位置是 相对当前浏览器窗口 的； 1position:fixed; right:100px; top:100px; 这里设置top来控制位置，而非margin-top. 容器中两个元素，第一个伸长的长度做控制标题不好描述，直接看图吧： 其中外层容器固定，a和b的长度不固定。当a超长的情况下，b依旧展示,a会显示…的形式 123456789101112131415161718192021.container &#123; display: flex; overflow: hidden; justify-content: space-between;&#125;.a &#123; flex-shrink: 1; overflow: hidden; &lt;!-- 下面说明是一行 --&gt; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; display: block;&#125;.b &#123; flex-shrink: 0;&#125;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css日常开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[富爸爸穷爸爸]]></title>
    <url>%2F2019%2F12%2F07%2Fbooks%2F%E5%AF%8C%E7%88%B8%E7%88%B8%E7%A9%B7%E7%88%B8%E7%88%B8%2F</url>
    <content type="text"><![CDATA[看看]]></content>
      <categories>
        <category>books</category>
      </categories>
      <tags>
        <tag>理财书籍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端学习路线]]></title>
    <url>%2F2019%2F07%2F06%2Fweb%2Fjs-study-log%2F</url>
    <content type="text"><![CDATA[做前端，总结下前端的学习过程 npmnpm中文网 npm是前端包管理工具，所有依赖都是根据npm来管理的。 先熟悉npm的基本命令，pageage文件的配置说明等 webpackwebpack是js程序打包模块。]]></content>
      <categories>
        <category>web</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Objective-C规范指南]]></title>
    <url>%2F2019%2F05%2F27%2FiOS%2FObjective-C%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[点语法应该 始终 使用点语法来访问或者修改属性，访问其他实例时首选括号（对比下面的属性）。 推荐： 123view.backgroundColor = [UIColor orangeColor]; [UIApplication sharedApplication].delegate; 反对： 123[view setBackgroundColor:[UIColor orangeColor]];UIApplication.sharedApplication.delegate; 间距 一个缩进使用 4 个空格，永远不要使用制表符（tab）缩进。请确保在 Xcode 中设置了此偏好。 方法的大括号和其他的大括号（if/else/switch/while 等等）始终和声明在同一行开始，在新的一行结束。 推荐： 123456789if (user.isHappy) &#123;// Do something&#125;else if (user.isOld) &#123;// Do something&#125; else &#123;// Do something else&#125; 方法之间应该正好空一行，这有助于视觉清晰度和代码组织性。在方法中的功能块之间应该使用空白分开，但往往可能应该创建一个新的方法。 @synthesize 和 @dynamic 在实现中每个都应该占一个新行。 条件判断条件判断主体部分应该始终使用大括号括住来防止出错，即使它可以不用大括号（例如它只需要一行）。这些错误包括添加第二行（代码）并希望它是 if 语句的一部分时。还有另外一种更危险的，当 if 语句里面的一行被注释掉，下一行就会在不经意间成为了这个 if 语句的一部分。此外，这种风格也更符合所有其他的条件判断，因此也更容易检查。 推荐： 123if (!error) &#123; return success;&#125; 反对： 12if (!error) return success; 或： 1if (!error) return success; ##三目运算符三目运算符(? :) ，只有当它可以增加代码清晰度或整洁时才使用。单一的条件都应该优先考虑使用。多条件时通常使用 if 语句会更易懂，或者重构为实例变量。 推荐： 1result = a &gt; b ? x : y; 反对： 1result = a &gt; b ? x = c &gt; d ? c : d : y; ##错误处理当引用一个返回错误参数（error parameter）的方法时，应该针对返回值，而非错误变量。 推荐： 1234NSError *error;if (![self trySomethingWithError:&amp;error]) &#123;// 处理错误&#125; 反对： 12345NSError *error;[self trySomethingWithError:&amp;error];if (error) &#123;// 处理错误&#125; 一些苹果的 API 在成功的情况下会写一些垃圾值给错误参数（如果非空），所以针对错误变量可能会造成虚假结果（以及接下来的崩溃）。 ##方法在方法签名中，在 -/+ 符号后应该有一个空格。方法片段之间也应该有一个空格。构造方法使 instancetype 作为返回类型来代替 id 。 推荐： 1- (void)setExampleText:(NSString *)text image:(UIImage *)image; 对于私有方法，应该加前缀用以区分。具体使用可以自行决定，建议使用p加下划线的方式：p_ , p表示”private”，不建议使用单个下划线的方式，这种方式是预留给苹果使用的。 ##变量变量名应该尽可能命名为描述性的。除了 for() 循环外，其他情况都应该避免使用单字母的变量名。 星号表示指针属性变量，例如：NSString *text不要写成NSString* text或者NSString * text，常量除外。 尽量定义属性来代替直接使用实例变量,同时声明内存的管理方式。如果一个属性只在 init 方法里设置了一次，声明为 readonly 。 推荐： 12345@interface WRGSection: NSObject@property (nonatomic, strong) NSString *headline;@end 反对： 123@interface WRGSection : NSObject &#123; NSString *headline;&#125; 或： 12345@interface WRGSection: NSObject@property (nonatomic) NSString *headline;@end ###变量限定符当涉及到在 ARC 中被引入变量限定符时， 限定符 (strong, weak, unsafe_unretained, autoreleasing) 应该位于最前面，如下。 1__weak NSString *text ##命名尽可能遵守苹果的命名约定，尤其那些涉及到内存管理规则，（NARC）的。 长的和描述性的方法名和变量名都不错。 推荐： 1UIButton *settingsButton; 反对： 1UIButton *setBut; 类名和常量应该始终使用三个字母的前缀（例如 WRG）（常亮也可使用字母k开头），但 Core Data 实体名称可以省略。为了代码清晰，常量应该使用相关类的名字作为前缀并使用驼峰命名法。 推荐： 1static const NSTimeInterval WRGArticleViewControllerNavigationFadeAnimationDuration = 0.3; 反对： 1static const NSTimeInterval fadetime = 1.7; 属性和局部变量应该使用驼峰命名法并且首字母小写。 为了保持一致，实例变量应该使用驼峰命名法命名，并且首字母小写，以下划线为前缀。这与 LLVM 自动合成的实例变量相一致。 如果 LLVM 可以自动合成变量，那就让它自动合成。 推荐： 1@synthesize descriptiveVariableName = _descriptiveVariableName; 反对： 1id varnm; ##注释当需要的时候，注释应该被用来解释 为什么 特定代码做了某些事情。所使用的任何注释必须保持最新否则就删除掉。 通常应该避免一大块注释，代码就应该尽量作为自身的文档，只需要隔几行写几句说明。这并不适用于那些用来生成文档的注释。 ##init 和 deallocdealloc 方法应该放在实现文件的最上面，并且刚好在 @synthesize 和 @dynamic 语句的后面。在任何类中，init 都应该直接放在 dealloc 方法的下面。 init 方法的结构应该像这样： 12345678- (instancetype)init &#123; self = [super init]; // 或者调用指定的初始化方法 if (self) &#123; // Custom initialization &#125; return self;&#125; ##字面量每当创建 NSString， NSDictionary， NSArray，和 NSNumber 类的不可变实例时，都应该使用字面量。要注意 nil 值不能传给 NSArray 和 NSDictionary 字面量，这样做会导致崩溃。 推荐： 1234NSArray *names = @[@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;];NSDictionary *productManagers = @&#123;@&quot;iPhone&quot; : @&quot;Kate&quot;, @&quot;iPad&quot; : @&quot;Kamal&quot;, @&quot;Mobile Web&quot; : @&quot;Bill&quot;&#125;;NSNumber *shouldUseLiterals = @YES;NSNumber *buildingZIPCode = @10018; 反对： 1234NSArray *names = [NSArray arrayWithObjects:@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;, nil];NSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @&quot;Kate&quot;, @&quot;iPhone&quot;, @&quot;Kamal&quot;, @&quot;iPad&quot;, @&quot;Bill&quot;, @&quot;Mobile Web&quot;, nil];NSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];NSNumber *buildingZIPCode = [NSNumber numberWithInteger:10018]; ##CGRect 函数当访问一个 CGRect 的 x， y， width， height 时，应该使用CGGeometry 函数代替直接访问结构体成员。苹果的 CGGeometry 参考中说到： 123All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics. 推荐： 123456CGRect frame = self.view.frame;CGFloat x = CGRectGetMinX(frame);CGFloat y = CGRectGetMinY(frame);CGFloat width = CGRectGetWidth(frame);CGFloat height = CGRectGetHeight(frame); 反对： 123456CGRect frame = self.view.frame;CGFloat x = frame.origin.x;CGFloat y = frame.origin.y;CGFloat width = frame.size.width;CGFloat height = frame.size.height; 常量常量首选内联字符串字面量或数字，因为常量可以轻易重用并且可以快速改变而不需要查找和替换。常量应该声明为 static 常量而不是 #define ，除非非常明确地要当做宏来使用。 推荐： 123static NSString * const WRGAboutViewControllerAuthorName = @&quot;Warning&quot;;static const CGFloat WRGImageThumbnailHeight = 50.0; 反对： 12#define AuthorName @&quot;Warning&quot;#define thumbnailHeight 2 若常量局限于某个实现文件，则以k开头；若在其他类中可见，则以类名为前缀。 枚举类型当使用 enum 时，建议使用新的基础类型规范，因为它具有更强的类型检查和代码补全功能。现在 SDK 包含了一个宏来鼓励使用使用新的基础类型 - NS_ENUM() 推荐： 1234typedef NS_ENUM(NSInteger, WRGAdRequestState) &#123; WRGAdRequestStateInactive, WRGAdRequestStateLoading&#125;; 凡是需要按位或操作来组合的枚举都应该使用NS_OPTIONS定义。 在switch语句中，总是习惯加上default语句，然而，若是用枚举来定义状态机，则最好不要有default分支。这样增加了一种状态，编译器会发出警告提示需要增加新的处理。 位掩码当用到位掩码时，使用 NS_OPTIONS 宏。 举例： 123456typedef NS_OPTIONS(NSUInteger, WRGAdCategory) &#123; WRGAdCategoryAutos = 1 &lt;&lt; 0, WRGAdCategoryJobs = 1 &lt;&lt; 1, WRGAdCategoryRealState = 1 &lt;&lt; 2, WRGAdCategoryTechnology = 1 &lt;&lt; 3&#125;; 属性在对象外部访问实例变量的时候，总是应该通过属性来访问。除了几种特殊情况，在对象内部时读取数据时，应该直接访问实例变量，而写入数据时，则应该通过属性来写。这么写的目的是： 直接访问实例变量的速度比较快，编译器所生成的代码会直接访问保存对象实例变量的内存。 直接访问实例变量时，不会调用其”设置方法”，这就绕过了为相关属性所定义的”内存管理语意”。 直接访问实例变量，不会触发KVO通知。具体有没有影响需要看具体行为。 通过属性来访问有助于排查错误，可以增加断点来监控对象行为。 在初始化方法和dealloc方法以及getter和setter中，应该总是使用实例变量来读写数据。 使用惰性初始化方法时，使用属性来访问。 私有属性应该声明在类实现文件的延展（匿名的类目）中。 支持： 12345678910111213141516171819202122232425262728293031323334353637@interface Counter : NSObject@property (nonatomic, retain) NSNumber *count;@end- (NSNumber *)count &#123; return _count;&#125; - (void)setCount:(NSNumber *)newCount &#123; [newCount retain]; [_count release]; // Make the new assignment. _count = newCount;&#125;- init &#123; self = [super init]; if (self) &#123; _count = [[NSNumber alloc] initWithInteger:0]; &#125; return self;&#125; - initWithCount:(NSNumber *)startingCount &#123; self = [super init]; if (self) &#123; _count = [startingCount copy]; &#125; return self;&#125;- (void)dealloc &#123; [_count release]; [super dealloc];&#125; 在继承父类的时候，如果本类中没有相关属性，在 init 方法中使用点语法，则会寻找父类属性，而使用实例变量则不会，可以很好的控制本类中的属性，检查属性。 有关在初始化方法和 dealloc 方法中使用访问器方法的信息，参见这里。 布尔因为 nil 解析为 NO，所以没有必要在条件中与它进行比较。永远不要直接和 YES 进行比较，因为 YES 被定义为 1，而 BOOL 可以多达 8 位。 这使得整个文件有更多的一致性和更大的视觉清晰度。 推荐： 12if (!someObject) &#123;&#125; 反对： 12if (someObject == nil) &#123;&#125; 对于 BOOL 来说, 这有两种用法: 12if (isAwesome)if (![someObject boolValue]) 反对： 12if ([someObject boolValue] == NO)if (isAwesome == YES) // 永远别这么做 如果一个 BOOL 属性名称是一个形容词，属性可以省略 “is” 前缀，但为 get 访问器指定一个惯用的名字，例如： 1@property (assign, getter=isEditable) BOOL editable; 内容和例子来自 Cocoa 命名指南 。 单例单例对象应该使用线程安全的模式创建共享的实例。 123456789+ (instancetype)sharedInstance &#123; static id sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; sharedInstance = [[self alloc] init]; &#125;); return sharedInstance;&#125; 这将会预防有时可能产生的许多崩溃。 导入将 import 和其他的文件名之间加一个空格。如果有一个以上的 import 语句，就对这些语句进行分组。每个分组的注释是可选的。注：对于模块使用 @import 语法。 除了子类化或是协议之外，最好使用 @class 这种方式，避免过多的头文件引入。在引入协议的时候，如果不是连当前类也引入的情况下，将协议单独声明出来再引入。 Xcode 工程为了避免文件杂乱，物理文件应该保持和 Xcode 项目文件同步。Xcode 创建的任何组（group）都必须在文件系统有相应的映射。为了更清晰，代码不仅应该按照类型进行分组，也可以根据功能进行分组。 如果可以的话，尽可能一直打开 target Build Settings 中 “Treat Warnings as Errors” 以及一些额外的警告。如果你需要忽略指定的警告,使用 Clang 的编译特性 。 空行1、在 extension 和 implementation 之间添加一行空格。 推荐： 1234567891011@interface MyClass ()// Properties - empty line above and below@end@implementation MyClass// Body - empty line above and below@end 2、在 @end之后添加一空行 3、使用 pragma mark之后添加一行空格 123456789- (CGSize)intrinsicContentSize &#123; return CGSizeMake(12, 12);&#125;#pragma mark - Private- (void)setup &#123; &#125; 4、操作数学运算符时在运算符俩侧添加空格。一元运算符不用。 推荐： 1234NSInteger index = rand() % 50 + 25;index++;index += 1;index--; 5、在进行逻辑判断时，在 if 之后添加一个空格，并在 { 之前添加一个空格。 推荐： 12if (alpha + beta &lt;= 0) &amp;&amp; (kappa + phi &gt; 0) &#123;&#125; 6、对于多参数的方法，除非方法签名大于或等于3行，否则不要换行。 推荐： 123456// blocks are easily readable[UIView animateWithDuration:1.0 animations:^&#123; // something&#125; completion:^(BOOL finished) &#123; // something&#125;]; 反对： 12345678// colon-aligning makes the block indentation wacky and hard to read[UIView animateWithDuration:1.0 animations:^&#123; // something &#125; completion:^(BOOL finished) &#123; // something &#125;]; 7、不要在对象类型前和 protocol之间添加空格。 推荐： @property (nonatomic, weak) id&lt;SGOAnalyticsDelegate&gt; analyticsDelegate; 反对： @property (nonatomic, weak) id &lt;SGOAnalyticsDelegate&gt; analyticsDelegate; 其他Objective-C 风格指南如果感觉不太符合口味，可以看看下面的风格指南： Objective-C 编程语言 Cocoa 基本原理指南 Cocoa 编码指南 iOS 应用编程指南 纽约时报 移动团队 Objective-C 规范指南 Robots &amp; Pencils Objective-C Style Guide 其他 raywenderlich.com Google GitHub Adium Sam Soffes CocoaDevCentral) Marcus Zarra]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速开始]]></title>
    <url>%2F2019%2F05%2F27%2F%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 多个category语法子分类下面的分类会将该分章放到 Java/Servlet这个分类下。 123categories: - Java - Servlet 同样的作用我们也可以这样写: 1categories: [Java, Servlet] 上面两种方法最终效果一样，都是将文章放在了一个子分类的目录下，效果如图。 多个分类如果我们的要求是将文章同时分到多个不同的分类中呢，我们应该这样： 123categories: - [Java] - [Servlet] 这样，就可以将上面的文章分类到 Java 和 Servlet 这两个不同的目录中了。 扩展一下，如果我们将其分类到 Java/Servlet 和 Programming 两个不同的目录下，我们应该如下写： 123categories: - [Java, Servlet] - [Programming] hexo引用图片绝对路径当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。 1![](/images/image.jpg) 图片既可以在首页内容中访问到，也可以在文章正文中访问到。 相对路径图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。 1post_asset_folder: true 将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。 1![](image.jpg) 上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。 如果希望图片在文章和首页中同时显示，可以使用标签插件语法。 1&#123;% asset_img image.jpg This is an image %&#125; 新建菜单menu存放归档文章如何新建文件到自定义目录menu下相关链接：https://www.cnblogs.com/codebook/p/10312965.html 新建的menu，里面设置路径的时候，要以category的方式来处理，如下： 12345678menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th Books: /categories/books/ || book # 这里是新增加的菜单 Movies: /movies/ || film archives: /archives/ || archive 新建的文件就可以直接放到books文件夹下，这样就应该直接展示出来了。 这里网上有描述说是需要加上 categories: books 或者 type: books，不过我直接放到目录下，没有设置是没问题的，所以我这里就先不设置了，如果不展示可以尝试设置一下 隐藏自定义菜单menu的评论默认的新建菜单，下面都带有评论，可以直接关闭。 打开自定义menu下的index.md文件，增加隐藏评论的语句： 1comments: false category和tag理解拿超市的货品来作例子: Category 就是不同货架 Label 好比是贴在商品上的描述信息标签 Tag 则可以是临时添加的标记，比如「废弃」、「价格过期」]]></content>
  </entry>
</search>
