<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>idechao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.idechao.com/"/>
  <updated>2019-12-16T09:36:08.374Z</updated>
  <id>http://www.idechao.com/</id>
  
  <author>
    <name>idechao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>股票投资实录</title>
    <link href="http://www.idechao.com/2019/12/12/%E8%82%A1%E7%A5%A8%E6%8A%95%E8%B5%84%E5%AE%9E%E5%BD%95/"/>
    <id>http://www.idechao.com/2019/12/12/股票投资实录/</id>
    <published>2019-12-12T15:32:19.000Z</published>
    <updated>2019-12-16T09:36:08.374Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7ff5af8ed1c6327fb0384113cdb5b62ebf220a59b3cb55191ff3d6ef81862798">a54a2cbf1c08c076e56153d9cabc95f928562e6200bd68ff4e9aa780f57a562cf748a81e24480d52b0b1d2761d45513d5bd912d20981b63be3dc6ca9cd5946064122c57f5a3f438c9db42dc7e49b251f6387f96eef45e4d3a671ecc12964049bf10e1dda12b2216678931fb6f7f0e333e31b4be056416c3438a64c9f561eaa8b6a1fbc2cbb47d5d6a5e385a9db884e800dc2e0ded1c1dcdf2d60f4c4a95451813d0abbce228d8cdf085cf1b31790d77af07432ca1348b22e75fdea68f83cf1fa1799248a980236340186be01a0c1aedd8e34dc5b0f706d695763b5c616c8de4fa53e929ab44be29d4a07000e410609b309a5041a730a2b02879b87728643303f81542e161f0d6f68252a115e8b08595dccbccc94f1749c11b246b863ebd9734083cb22b3d860f7010aedc0cac2f42bbc1cb81874b2990bbe6225ff0a85035e8688643376a14e8655c0920d1550352b5c2c8c9a4b44046a05d4ad1fce8301670eed5d4820bb6680e19bf9cd07cdc10e8bbff694fea16306470b32937b632036658c6f16ac786d11066cd637dadb69509a84bce02c043c8210e4dbe8e6b7d74c9d5718362aa4b67c4760793b8f791f69caf9d1e3b61a1391f24f467d657ecd32553440361fe056a08c99f0a276d1ba6cb197031a13425c9558115ea02558772ae2f94ee1d45c23e4e677e245fc1a3d90947e9f99110f82eef804ba05af8c06fde1cd07cd169460bb252bd9ce057d41c1247e21923aadef1350955aee9f980be59bd0055cd587ac3c53b1804137d6c56816c482556ff51d6a408d985b53d3ed689c6bdcf46932c201101650869b08a80bef9bc2459aa7b76c706461e7ff77b5677f9c4263f59d39e176f2300414c75cbc18c5583a19078e45171e45c40edbb0029f84b357fcb9754e14b5530bc569a7eb27318269d72dc1143b1a4388bbed0856a8208acfda6ed901368b2e62f330cb37f72761446b764b7a7a9986d5425f1aa77fad7c17aa408ef599a2cbaaed08cb08973abed37caf856f4aca84c9e092bcddfee8bfdb3d54ccf9e0fd1e7306a103515bbe181b63021d20c9f458183d4092e1e244c41a0eacf3e0f6cc90976e0a4e5f1b93f0848189ba25e47764108ef025103f95ad497eff6564e2e161ad3cd0c264ff4295472c56cc68025c0197f150b869f7d5c86dd2c6294033b373c40203f85c06a02c6ba94265bfc62a9752a66a990510674020360dca352af90ed3adfffc39d45e24fda992ecdd18bdff043ed457aae46a265ab42d149e7da361b097107150880304cc0f99adfe873355ec82117cc500cf03dc6761492534b7e668ab9e458998bff7de305a013596e2476e8c05563fccba087ec51a5a35f904861ba6a752cdc11843138e063bbd6edd827378224d1f85f63727b2977896d771f1da25bb2df642f3d0f84ba6a7840e9a132ad7a136242495d24a9f3d422e39cf652ed19df233e7579144d7adf7ce911597c6bf63b2d928fe7e4c4c0758add3a57c105fde252ed8ae899b8f3acde073d30756fa098fdcfd6d4fa440b82ebf4004bb696803ecda745ac83ea7be4be23006e4634436faf555d5b1a26c2493d390c65ab6863cb663a98bc0fae5d4fd8d39c8feef0b76f3f992c3942ed31b601f92a9de7bb0686fdf024cf22a25cb43e169b692d4feb88972b9514131900a40e00d03eb91b8ddc1a76efff76bda1e22898dcd10d45a0c6bf570f1e9b3ed89a2eb4745fb5979b25e65e4b632cd71dafc6149831fa08abc16077fd99be1581625f036f5b6a1813ea196e8cab1251585c2f4a74121928a904247ea7d899e9625c84d41c49c2c17a3906f350f217d3fa265b6b70783cb713391e150bf63d666e9c3d037431d9a394169852f21a0370a1da2ea2027597f8e77f5f2f43a9e26c55b3c46f4846d6fab461507f1379a4311a7a596e66b5fa1b92bab4e01644b02febdea4b0fb1622725ce8978eaf9294a407a76323a9310ecc78530046234ff01932a45a6694ca78f9205906afb13f4a7d0f905cd7392a8518d06a263f82bcb63fe41a821b290a80f2b8422482bc3bc01a299e499d3d8ffe946eb8227750fe210d7c936797dcb459d06b68939101943b6efb3f48025a1ffb401575ffd750c75bed9338a05e38bb93c4c4c2000d56924a9d37b99f44d500993aca2e18acaf9f0e7b6cd7b3a82e3ce8d09a6396a2f81314d37890a282d956ef0386982ddb7ae9620510af8dd33e541ab3a0f85f2a63941012e1a484af35a2efdc67d7a6c0b14ed3966a41120d2e87211c1114f8a82740971e1b0c3f991cb94352178460bfa8a082500c2087c05e32ef1b65f394f1a54edc7ba2e50fe7445dcd1abe663a6fce584655c489378205b0c1a4fb0fb872600af84266662f7261cc52c1c3e2da4dbf9e2ffcf02cb00df2366b20aad960bd0f414c74fd9f86b4a30f5be6c0568518976591500b9a8705e9fc89161076e64764f179714caf1617b0409ca19f0f66e6f5a835bb49748bd6d765e70214b33be29a76bfa2160cc4951d5523a3bef99531e78b0024c75ec3976e77b1fb21fdfcec897ecee0031aa17c453326a47ce8ab868cba67a548b2077795485d3de2b53d9c3a28912bdfa72bfc45c2c2dc3861b413993c7844ca55938b4c6014918c5176df165d89d7574bd8f98fd76cbd381ddc9788e4d411b6c6b9aa00e3b1908d713147b31b49057e15562008bfb94e723ffa176eb6c847ffb0429227eae68b098dbcb158976cd200aff1ef79d4ee65f904a3fa1d7d529a78a6ae9d983946296fc1e039df3c8c616d8cf4d0d19efe0815a8cade9925264aedee5524eb7c755ded0e9fb7e5d6c2e109bf797316df6a86f92f3e07f771fb2511e6374ab46ad3dba819a695d0f83979a56803fd6f422133c77de0ec584494d1b8fef99dc52f6ed4aa16429ed7aeb17b7dcbf34f9a41c483a2186bac2628b1ff5d0a8ff7f9e3febdd1ec1323612282daf241dead3078cc7b16df4f70cde5ed2617407328fd76f9cf7f55b6adddd567c71cf15b59ee42ddb331452528dc6302052a34039151a2ec648058c20449f2b3441ee29b0041d8c8351c5ca775208b117ff45d8aad7a52a5a8c160b57ddc82336c420b580c83bbcd33e5d8335bd34d4c82a41388b34d97c555c10be36108edff307243ec083f56af61532bade6d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      股票投资实录
    
    </summary>
    
      <category term="投资理财" scheme="http://www.idechao.com/categories/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="投资理财" scheme="http://www.idechao.com/tags/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>css常见问题小记</title>
    <link href="http://www.idechao.com/2019/12/09/css%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.idechao.com/2019/12/09/css常见问题小记/</id>
    <published>2019-12-09T06:31:07.000Z</published>
    <updated>2019-12-09T08:35:20.108Z</updated>
    
    <content type="html"><![CDATA[<p>css日常开始时，遇到的问题，通过搜索找到的答案，做下总结。</p><h1 id="文本垂直居中"><a href="#文本垂直居中" class="headerlink" title="文本垂直居中"></a>文本垂直居中</h1><p>这个方法只能将单行文本置中。只需要简单地把 <code>line-height</code> 设置为那个对象的 height 值就可以使文本居中了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;content&quot;&gt; Content here&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#content &#123;</span><br><span class="line">height: 100px;</span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>适用于所有浏览器</li><li>无足够空间时不会被截断</li></ul><p>缺点：</p><ul><li>只对文本有效(块级元素无效)</li><li>多行时，断词比较糟糕</li></ul><p>这个方法在小元素上非常有用，例如使按钮文本或者单行文本居中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;css日常开始时，遇到的问题，通过搜索找到的答案，做下总结。&lt;/p&gt;
&lt;h1 id=&quot;文本垂直居中&quot;&gt;&lt;a href=&quot;#文本垂直居中&quot; class=&quot;headerlink&quot; title=&quot;文本垂直居中&quot;&gt;&lt;/a&gt;文本垂直居中&lt;/h1&gt;&lt;p&gt;这个方法只能将单行文本置中。只需
      
    
    </summary>
    
      <category term="CSS" scheme="http://www.idechao.com/categories/CSS/"/>
    
    
      <category term="css日常开发" scheme="http://www.idechao.com/tags/css%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>js学习笔记</title>
    <link href="http://www.idechao.com/2019/12/05/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.idechao.com/2019/12/05/js学习笔记/</id>
    <published>2019-12-05T12:42:05.000Z</published>
    <updated>2019-12-16T13:22:43.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>js基础可以参考：</p><ul><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">网道 / WangDoc.com</a></li><li><a href="https://zh.javascript.info/js" target="_blank" rel="noopener">javascript.info</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN-JavaScript</a></li></ul><p>ES6可以参考下面两个，内容相差不大：</p><ul><li><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="http://caibaojian.com/es6/" target="_blank" rel="noopener">ES6入门文档</a></li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h2><h3 id="push-pop-shift-unshift"><a href="#push-pop-shift-unshift" class="headerlink" title="push/pop,shift/unshift"></a>push/pop,shift/unshift</h3><p><code>shift</code>，返回删除的第一个元素; <code>unshift</code>就是在头部增加多个元素。</p><p><span style="color:red; font-weight:bold">都会修改原数组</span>，想要获取第一个，可以直接使用<code>arr[0]</code>。</p><h3 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h3><p>1、 优先考虑使用ES6的语法<code>...</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr1 = [1,2,3]</span><br><span class="line">let arr2 = [...arr1]</span><br><span class="line">arr2[0] = 0</span><br><span class="line">console.log(arr1) // =&gt; [ 1, 2, 3 ]</span><br><span class="line">console.log(arr2) // =&gt; [ 0, 2, 3 ]</span><br></pre></td></tr></table></figure><p>2、 slice语法</p><p>无需传递参数，或者从0到数组的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr1 = [1,2,3]</span><br><span class="line">let  arr2 = arr1.slice()</span><br><span class="line"></span><br><span class="line">arr2[0] = 0</span><br><span class="line"></span><br><span class="line">console.log(arr1)// =&gt; [ 1, 2, 3 ]</span><br><span class="line">console.log(arr2)// =&gt; [ 0, 2, 3 ]</span><br></pre></td></tr></table></figure><p>3、 通过<code>Object.assign</code>方法复制:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr1 = [1,2,3]</span><br><span class="line">let arr2 = []</span><br><span class="line">Object.assign(arr2, arr1)</span><br><span class="line">arr2[0] = 0</span><br><span class="line">console.log(arr1) // =&gt; [ 1, 2, 3 ]</span><br><span class="line">console.log(arr2) // =&gt; [ 0, 2, 3 ]</span><br></pre></td></tr></table></figure><h3 id="splice-添加，删除和插入元素"><a href="#splice-添加，删除和插入元素" class="headerlink" title="splice 添加，删除和插入元素"></a>splice 添加，删除和插入元素</h3><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(index[, deleteCount, elem1, ..., elemN])</span><br></pre></td></tr></table></figure><p>从 <code>index</code> 开始：删除 <code>deleteCount</code> 元素并在当前位置插入 <code>elem1, ..., elemN</code>。最后返回已删除元素的数组。</p><p>可以将 <code>deleteCount</code> 设置为 0，<code>splice</code> 方法就能够插入元素而不用删除。</p><p>这里和其他数组方法中，负向索引是允许的。它们从数组末尾计算位置。</p><h3 id="slice-数组的子数组"><a href="#slice-数组的子数组" class="headerlink" title="slice 数组的子数组"></a>slice 数组的子数组</h3><p>它从所有元素的开始索引 <code>&quot;start&quot;</code> 复制到 <code>&quot;end&quot;</code> (不包括 <code>&quot;end&quot;</code>) 返回一个新的数组。<code>start</code> 和 <code>end</code> 都可以是负数，在这种情况下，从末尾计算索引。语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.slice(start, end)</span><br></pre></td></tr></table></figure><p>如果不传参数，则表示复制整个数组，</p><h3 id="concat-数组合并"><a href="#concat-数组合并" class="headerlink" title="concat 数组合并"></a>concat 数组合并</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.concat(arg1, arg2...)</span><br></pre></td></tr></table></figure><p>如下例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2];</span><br><span class="line"></span><br><span class="line">// merge arr with [3,4]</span><br><span class="line">alert( arr.concat([3, 4])); // 1,2,3,4</span><br><span class="line"></span><br><span class="line">// merge arr with [3,4] and [5,6]</span><br><span class="line">alert( arr.concat([3, 4], [5, 6])); // 1,2,3,4,5,6</span><br><span class="line"></span><br><span class="line">// merge arr with [3,4], then add values 5 and 6</span><br><span class="line">alert( arr.concat([3, 4], 5, 6)); // 1,2,3,4,5,6</span><br></pre></td></tr></table></figure><h3 id="indexOf-lastIndexOf-和-includes-查询数组"><a href="#indexOf-lastIndexOf-和-includes-查询数组" class="headerlink" title="indexOf/lastIndexOf 和 includes 查询数组"></a>indexOf/lastIndexOf 和 includes 查询数组</h3><ul><li><code>arr.indexOf(item, from)</code> 从索引 <code>from</code> 查询 <code>item</code>，如果找到返回索引，否则返回 -1。</li><li><code>arr.lastIndexOf(item, from)</code> — 和上面相同，只是从尾部开始查询。</li><li><code>arr.includes(item, from)</code> — 从索引 <code>from</code> 查询 <code>item</code>，如果找到则返回 <code>true</code>。</li></ul><h3 id="find-和-findIndex-条件查询"><a href="#find-和-findIndex-条件查询" class="headerlink" title="find 和 findIndex 条件查询"></a>find 和 findIndex 条件查询</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let result = arr.find(function(item, index, array) &#123;</span><br><span class="line">  // 如果查询到返回 true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果它返回<code>true</code>，则查询停止，返回 <code>item</code>。如果没有查询到，则返回 <code>undefined</code>。</p><p><strong>如果多个结果满足条件，则只返回第一个，或者说是查询到满足条件的结果之后，就不会继续查询了。</strong></p><p>如下例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let users = [</span><br><span class="line">  &#123;id: 1, name: &quot;John&quot;&#125;,</span><br><span class="line">  &#123;id: 2, name: &quot;Pete&quot;&#125;,</span><br><span class="line">  &#123;id: 3, name: &quot;Mary&quot;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">let user = users.find(item =&gt; item.id == 1);</span><br><span class="line"></span><br><span class="line">alert(user.name); // John</span><br></pre></td></tr></table></figure><h3 id="filter-条件查询"><a href="#filter-条件查询" class="headerlink" title="filter 条件查询"></a>filter 条件查询</h3><p>语法类似<code>find</code>，不过返回的是满足条件的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let users = [</span><br><span class="line">  &#123;id: 1, name: &quot;John&quot;&#125;,</span><br><span class="line">  &#123;id: 2, name: &quot;Pete&quot;&#125;,</span><br><span class="line">  &#123;id: 3, name: &quot;Mary&quot;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// 返回前两个用户的数组</span><br><span class="line">let someUsers = users.filter(item =&gt; item.id &lt; 3);</span><br><span class="line"></span><br><span class="line">alert(someUsers.length); // 2</span><br></pre></td></tr></table></figure><h2 id="属性值的简写"><a href="#属性值的简写" class="headerlink" title="属性值的简写"></a>属性值的简写</h2><p>在有变量的情况下，对象可以直接简写为变量名，这样<code>key</code>就是变量的名字，值为实际变量的值，写法上可以直接省略<code>value</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let name = &apos;Tom&apos;</span><br><span class="line"></span><br><span class="line">let user = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age: 30,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(user.name)</span><br></pre></td></tr></table></figure><p>正常输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tom</span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性就是先声明一个变量，然后以<span style="color:red;font-weight:bold;">方括号</span>的形式来设置变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let name = &apos;随便起的name标识key&apos;</span><br><span class="line">let user = &#123;</span><br><span class="line">    [name]: &apos;Tom&apos;,</span><br><span class="line">&#125;</span><br><span class="line">console.log(user[name])</span><br></pre></td></tr></table></figure><p>正常输出输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tom</span><br></pre></td></tr></table></figure><p>设置和取值的时候都是以<span style="color:red;font-weight:bold;">方括号</span>的形式来设置的，如下直接使用点语法是获取不到的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(user.name)</span><br><span class="line"></span><br><span class="line">//输出</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p>这里在Symbol属性中有使用，可以参考下。</p><h1 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h1><p><code>Symbol</code> 值表示唯一的标识符。</p><p>可以使用 Symbol() 来创建这种类型的值。全局的使用<code>Symbol.for(key)</code>的方式，如果key存在，则使用，不存在，则创建。</p><p>举例：隐藏属性。</p><p>如原先可能有定义<code>id</code>字段，现在想新增一个唯一标识符，那不确定的情况下，不能直接设置<code>id</code>的值，会覆盖。这种情况下就使用<code>Symbol</code>唯一标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let user = &#123;</span><br><span class="line">    name: &apos;bob&apos;,</span><br><span class="line">&#125;</span><br><span class="line">let id = Symbol(&apos;id&apos;);</span><br><span class="line">user[id] = &apos;new id&apos;</span><br><span class="line"></span><br><span class="line">console.log(user[id])</span><br></pre></td></tr></table></figure><p>正常输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new id</span><br></pre></td></tr></table></figure><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown 最后是会被转换成 HTML 故使用 &lt;code&gt; 标签来解决</span><br><span class="line">| 在 HTML 中传输使用的 ACSII 码为 124，故使用 &amp;#124; 替换之</span><br></pre></td></tr></table></figure><p>js中的特定功能：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">语法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">逻辑与，AND（&amp;&amp;）</td><td style="text-align:center">expr1 &amp;&amp; expr2</td><td style="text-align:center">若 expr1 可转换为 true，则返回 expr2；否则，返回 expr1。</td></tr><tr><td style="text-align:center">逻辑或，OR（&#124; &#124;）</td><td style="text-align:center">expr1 &#124; &#124; expr2</td><td style="text-align:center">若 expr1 可转换为 true，则返回 expr1；否则，返回 expr2。</td></tr><tr><td style="text-align:center">逻辑非，NOT（!）</td><td style="text-align:center">!expr</td><td style="text-align:center">若 expr 可转换为 true，则返回 false；否则，返回 true。</td></tr></tbody></table><h1 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h1><p>使用函数表达的时候，在赋值的情况下，右边的函数带括号和不带括号，使用起来是不一样的，如定义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sayHello() &#123;</span><br><span class="line">    console.log(&apos;hello~&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在赋值的时候，第一种直接使用<code>sayHello</code>，不带括号，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let hello = sayHello</span><br><span class="line">hello() // =&gt; hello</span><br><span class="line">hello // =&gt; 没有效果</span><br></pre></td></tr></table></figure><p>表示<code>sayHello</code>复制到了变量<code>hello</code>。</p><p>第二种，带着括号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let hello2 = sayHello()</span><br><span class="line">hello() // =&gt; error</span><br><span class="line">hello // =&gt; hello~</span><br></pre></td></tr></table></figure><p>表示将调用结果写进<code>hello2</code>，而不是函数本身。</p><p>在直接定义的情况，也就是变量后面直接跟着函数的情况下，是以上面第一种情况一样的，使用的时候需要带着括号，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let hello3 = function () &#123;</span><br><span class="line">    console.log(&apos;hi&apos;)</span><br><span class="line">&#125;</span><br><span class="line">hello3()</span><br></pre></td></tr></table></figure><h1 id="方法和函数的区别"><a href="#方法和函数的区别" class="headerlink" title="方法和函数的区别"></a>方法和函数的区别</h1><ul><li>函数（function） 函数是一段代码，需要通过名字来进行调用。它能将一些数据（函数的参数）传递进去进行处理，然后返回一些数据（函数的返回值），也可以不返回数据。 </li><li>方法（method）是通过对象调用的javascript函数。也就是说，方法也是函数，只是比较特殊的函数。  </li><li>当将函数和对象和写在一起时，函数（function）就变成了方法（method）。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;p&gt;js基础可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wangdoc.com/javascript
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.idechao.com/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="http://www.idechao.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C规范指南</title>
    <link href="http://www.idechao.com/2019/05/27/Objective-C%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/"/>
    <id>http://www.idechao.com/2019/05/27/Objective-C规范指南/</id>
    <published>2019-05-27T14:18:32.000Z</published>
    <updated>2019-12-06T12:12:21.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点语法"><a href="#点语法" class="headerlink" title="点语法"></a>点语法</h2><p>应该 <strong>始终</strong> 使用点语法来访问或者修改属性，访问其他实例时首选括号（对比下面的属性）。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">view.backgroundColor = [UIColor orangeColor];</span><br><span class="line"> </span><br><span class="line">[UIApplication sharedApplication].delegate;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[view setBackgroundColor:[UIColor orangeColor]];</span><br><span class="line"></span><br><span class="line">UIApplication.sharedApplication.delegate;</span><br></pre></td></tr></table></figure><h2 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h2><ul><li>一个缩进使用 4 个空格，永远不要使用制表符（tab）缩进。请确保在 Xcode 中设置了此偏好。</li><li>方法的大括号和其他的大括号（if/else/switch/while 等等）始终和声明在同一行开始，在新的一行结束。</li></ul><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (user.isHappy) &#123;</span><br><span class="line">// Do something</span><br><span class="line">&#125;</span><br><span class="line">else if (user.isOld) &#123;</span><br><span class="line">// Do something</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Do something else</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法之间应该正好空一行，这有助于视觉清晰度和代码组织性。在方法中的功能块之间应该使用空白分开，但往往可能应该创建一个新的方法。</li><li>@synthesize 和 @dynamic 在实现中每个都应该占一个新行。</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>条件判断主体部分应该始终使用大括号括住来防止出错，即使它可以不用大括号（例如它只需要一行）。这些错误包括添加第二行（代码）并希望它是 if 语句的一部分时。还有另外一种<a href="http://programmers.stackexchange.com/questions/16528/single-statement-if-block-braces-or-no/16530#16530" target="_blank" rel="noopener">更危险的</a>，当 if 语句里面的一行被注释掉，下一行就会在不经意间成为了这个 if 语句的一部分。此外，这种风格也更符合所有其他的条件判断，因此也更容易检查。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!error) &#123;</span><br><span class="line">return success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!error)</span><br><span class="line">return success;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!error) return success;</span><br></pre></td></tr></table></figure><p>##三目运算符<br>三目运算符(? :) ，只有当它可以增加代码清晰度或整洁时才使用。单一的条件都应该优先考虑使用。多条件时通常使用 if 语句会更易懂，或者重构为实例变量。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = a &gt; b ? x : y;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = a &gt; b ? x = c &gt; d ? c : d : y;</span><br></pre></td></tr></table></figure><p>##错误处理<br>当引用一个返回错误参数（error parameter）的方法时，应该针对返回值，而非错误变量。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSError *error;</span><br><span class="line">if (![self trySomethingWithError:&amp;error]) &#123;</span><br><span class="line">// 处理错误</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSError *error;</span><br><span class="line">[self trySomethingWithError:&amp;error];</span><br><span class="line">if (error) &#123;</span><br><span class="line">// 处理错误</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些苹果的 API 在成功的情况下会写一些垃圾值给错误参数（如果非空），所以针对错误变量可能会造成虚假结果（以及接下来的崩溃）。</p><p>##方法<br>在方法签名中，在 -/+ 符号后应该有一个空格。方法片段之间也应该有一个空格。构造方法使  <em><a href="http://clang.llvm.org/docs/LanguageExtensions.html#related-result-types" target="_blank" rel="noopener">instancetype </a></em> 作为返回类型来代替 <em>id</em> 。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)setExampleText:(NSString *)text image:(UIImage *)image;</span><br></pre></td></tr></table></figure><p>对于私有方法，应该加前缀用以区分。具体使用可以自行决定，建议使用p加下划线的方式：<em>p_</em> , p表示”private”，不建议使用单个下划线的方式，这种方式是预留给苹果使用的。</p><p>##变量<br>变量名应该尽可能命名为描述性的。除了 for() 循环外，其他情况都应该避免使用单字母的变量名。 星号表示指针属性变量，例如：<code>NSString *text</code>不要写成<code>NSString* text</code>或者<code>NSString * text</code>，常量除外。 </p><p>尽量定义属性来代替直接使用实例变量,同时声明内存的管理方式。如果一个属性只在 <em>init</em> 方法里设置了一次，声明为 <em>readonly</em> 。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection: NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *headline;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection : NSObject &#123;</span><br><span class="line">NSString *headline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection: NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic) NSString *headline;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>###变量限定符<br>当涉及到<a href="https://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226-CH1-SW4" target="_blank" rel="noopener">在 ARC 中被引入</a>变量限定符时， 限定符 (<strong>strong, </strong>weak, <strong>unsafe_unretained, </strong>autoreleasing) 应该位于最前面，如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__weak NSString *text</span><br></pre></td></tr></table></figure><p>##命名<br>尽可能遵守苹果的命名约定，尤其那些涉及到<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" target="_blank" rel="noopener">内存管理规则</a>，（<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" target="_blank" rel="noopener">NARC</a>）的。</p><p>长的和描述性的方法名和变量名都不错。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton *settingsButton;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton *setBut;</span><br></pre></td></tr></table></figure><p>类名和常量应该始终使用三个字母的前缀（例如 WRG）（常亮也可使用字母k开头），但 Core Data 实体名称可以省略。为了代码清晰，常量应该使用相关类的名字作为前缀并使用驼峰命名法。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval WRGArticleViewControllerNavigationFadeAnimationDuration = 0.3;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval fadetime = 1.7;</span><br></pre></td></tr></table></figure><p>属性和局部变量应该使用驼峰命名法并且首字母小写。</p><p>为了保持一致，实例变量应该使用驼峰命名法命名，并且首字母小写，以下划线为前缀。这与 LLVM 自动合成的实例变量相一致。 如果 <strong>LLVM</strong> 可以自动合成变量，那就让它自动合成。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@synthesize descriptiveVariableName = _descriptiveVariableName;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id varnm;</span><br></pre></td></tr></table></figure><p>##注释<br>当需要的时候，注释应该被用来解释 为什么 特定代码做了某些事情。所使用的任何注释必须保持最新否则就删除掉。</p><p>通常应该避免一大块注释，代码就应该尽量作为自身的文档，只需要隔几行写几句说明。这并不适用于那些用来生成文档的注释。</p><p>##init 和 dealloc<br><em>dealloc</em> 方法应该放在实现文件的最上面，并且刚好在 <em>@synthesize</em> 和 <em>@dynamic</em> 语句的后面。在任何类中，<em>init</em> 都应该直接放在 <em>dealloc</em> 方法的下面。</p><p>init 方法的结构应该像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)init &#123;</span><br><span class="line">self = [super init]; // 或者调用指定的初始化方法</span><br><span class="line">if (self) &#123;</span><br><span class="line">    // Custom initialization</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##字面量<br>每当创建 <em>NSString</em>， <em>NSDictionary</em>， <em>NSArray</em>，和 <em>NSNumber</em> 类的不可变实例时，都应该使用字面量。要注意 <em>nil</em> 值不能传给 <em>NSArray</em> 和 <em>NSDictionary</em> 字面量，这样做会导致崩溃。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = @[@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;];</span><br><span class="line">NSDictionary *productManagers = @&#123;@&quot;iPhone&quot; : @&quot;Kate&quot;, @&quot;iPad&quot; : @&quot;Kamal&quot;, @&quot;Mobile Web&quot; : @&quot;Bill&quot;&#125;;</span><br><span class="line">NSNumber *shouldUseLiterals = @YES;</span><br><span class="line">NSNumber *buildingZIPCode = @10018;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = [NSArray arrayWithObjects:@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;, nil];</span><br><span class="line">NSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @&quot;Kate&quot;, @&quot;iPhone&quot;, @&quot;Kamal&quot;, @&quot;iPad&quot;, @&quot;Bill&quot;, @&quot;Mobile Web&quot;, nil];</span><br><span class="line">NSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];</span><br><span class="line">NSNumber *buildingZIPCode = [NSNumber numberWithInteger:10018];</span><br></pre></td></tr></table></figure><p>##CGRect 函数<br>当访问一个 CGRect 的 x， y， width， height 时，应该使用<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGGeometry/index.html" target="_blank" rel="noopener">CGGeometry 函数</a>代替直接访问结构体成员。苹果的 CGGeometry 参考中说到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. </span><br><span class="line">For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. </span><br><span class="line">Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics.</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame;</span><br><span class="line"></span><br><span class="line">CGFloat x = CGRectGetMinX(frame);</span><br><span class="line">CGFloat y = CGRectGetMinY(frame);</span><br><span class="line">CGFloat width = CGRectGetWidth(frame);</span><br><span class="line">CGFloat height = CGRectGetHeight(frame);</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame;</span><br><span class="line"></span><br><span class="line">CGFloat x = frame.origin.x;</span><br><span class="line">CGFloat y = frame.origin.y;</span><br><span class="line">CGFloat width = frame.size.width;</span><br><span class="line">CGFloat height = frame.size.height;</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量首选内联字符串字面量或数字，因为常量可以轻易重用并且可以快速改变而不需要查找和替换。常量应该声明为 static 常量而不是 #define ，除非非常明确地要当做宏来使用。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static NSString * const WRGAboutViewControllerAuthorName = @&quot;Warning&quot;;</span><br><span class="line"></span><br><span class="line">static const CGFloat WRGImageThumbnailHeight = 50.0;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define AuthorName @&quot;Warning&quot;</span><br><span class="line">#define thumbnailHeight 2</span><br></pre></td></tr></table></figure><p>若常量局限于某个实现文件，则以k开头；若在其他类中可见，则以类名为前缀。</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>当使用 enum 时，建议使用新的基础类型规范，因为它具有更强的类型检查和代码补全功能。现在 SDK 包含了一个宏来鼓励使用使用新的基础类型 - NS_ENUM()</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, WRGAdRequestState) &#123;</span><br><span class="line">WRGAdRequestStateInactive,</span><br><span class="line">WRGAdRequestStateLoading</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>凡是需要按位或操作来组合的枚举都应该使用NS_OPTIONS定义。</p><p>在switch语句中，总是习惯加上default语句，然而，若是用枚举来定义状态机，则最好不要有default分支。这样增加了一种状态，编译器会发出警告提示需要增加新的处理。</p><h2 id="位掩码"><a href="#位掩码" class="headerlink" title="位掩码"></a>位掩码</h2><p>当用到位掩码时，使用 NS_OPTIONS 宏。</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_OPTIONS(NSUInteger, WRGAdCategory) &#123;</span><br><span class="line">WRGAdCategoryAutos      = 1 &lt;&lt; 0,</span><br><span class="line">WRGAdCategoryJobs       = 1 &lt;&lt; 1,</span><br><span class="line">WRGAdCategoryRealState  = 1 &lt;&lt; 2,</span><br><span class="line">WRGAdCategoryTechnology = 1 &lt;&lt; 3</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>在对象外部访问实例变量的时候，总是应该通过属性来访问。除了几种特殊情况，在对象内部时读取数据时，应该直接访问实例变量，而写入数据时，则应该通过属性来写。这么写的目的是：</p><ul><li>直接访问实例变量的速度比较快，编译器所生成的代码会直接访问保存对象实例变量的内存。</li><li>直接访问实例变量时，不会调用其”设置方法”，这就绕过了为相关属性所定义的”内存管理语意”。</li><li>直接访问实例变量，不会触发KVO通知。具体有没有影响需要看具体行为。</li><li>通过属性来访问有助于排查错误，可以增加断点来监控对象行为。</li></ul><p>在初始化方法和dealloc方法以及getter和setter中，应该总是使用实例变量来读写数据。</p><p>使用惰性初始化方法时，使用属性来访问。</p><p>私有属性应该声明在类实现文件的延展（匿名的类目）中。</p><p>支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@interface Counter : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, retain) NSNumber *count;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">- (NSNumber *)count &#123;</span><br><span class="line">return _count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setCount:(NSNumber *)newCount &#123;</span><br><span class="line">    [newCount retain];</span><br><span class="line">    [_count release];</span><br><span class="line">    // Make the new assignment.</span><br><span class="line">    _count = newCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- init &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _count = [[NSNumber alloc] initWithInteger:0];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- initWithCount:(NSNumber *)startingCount &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _count = [startingCount copy];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    [_count release];</span><br><span class="line">    [super dealloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在继承父类的时候，如果本类中没有相关属性，在 init 方法中使用点语法，则会寻找父类属性，而使用实例变量则不会，可以很好的控制本类中的属性，检查属性。</p><p>有关在初始化方法和 dealloc 方法中使用访问器方法的信息，参见<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6" target="_blank" rel="noopener">这里</a>。</p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>因为 nil 解析为 NO，所以没有必要在条件中与它进行比较。永远不要直接和 YES 进行比较，因为 YES 被定义为 1，而 BOOL 可以多达 8 位。</p><p>这使得整个文件有更多的一致性和更大的视觉清晰度。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!someObject) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (someObject == nil) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 BOOL 来说, 这有两种用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (isAwesome)</span><br><span class="line">if (![someObject boolValue])</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ([someObject boolValue] == NO)</span><br><span class="line">if (isAwesome == YES) // 永远别这么做</span><br></pre></td></tr></table></figure><p>如果一个 BOOL 属性名称是一个形容词，属性可以省略 “is” 前缀，但为 get 访问器指定一个惯用的名字，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (assign, getter=isEditable) BOOL editable;</span><br></pre></td></tr></table></figure><p>内容和例子来自 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE" target="_blank" rel="noopener">Cocoa 命名指南</a> 。</p><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p>单例对象应该使用线程安全的模式创建共享的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)sharedInstance &#123;</span><br><span class="line">static id sharedInstance = nil;</span><br><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">sharedInstance = [[self alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将会预防<a href="http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html" target="_blank" rel="noopener">有时可能产生的许多崩溃</a>。</p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>将 <em>import</em> 和其他的文件名之间加一个空格。如果有一个以上的 import 语句，就对这些语句进行<a href="http://ashfurrow.com/blog/structuring-modern-objective-c/" target="_blank" rel="noopener">分组</a>。每个分组的注释是可选的。<br>注：对于模块使用 <a href="http://clang.llvm.org/docs/Modules.html#using-modules" target="_blank" rel="noopener">@import</a> 语法。</p><p>除了子类化或是协议之外，最好使用 <strong>@class</strong> 这种方式，避免过多的头文件引入。在引入协议的时候，如果不是连当前类也引入的情况下，将协议单独声明出来再引入。</p><h2 id="Xcode-工程"><a href="#Xcode-工程" class="headerlink" title="Xcode 工程"></a>Xcode 工程</h2><p>为了避免文件杂乱，物理文件应该保持和 Xcode 项目文件同步。Xcode 创建的任何组（group）都必须在文件系统有相应的映射。为了更清晰，代码不仅应该按照类型进行分组，也可以根据功能进行分组。</p><p>如果可以的话，尽可能一直打开 target Build Settings 中 “Treat Warnings as Errors” 以及一些<a href="http://boredzo.org/blog/archives/2009-11-07/warnings" target="_blank" rel="noopener">额外的警告</a>。如果你需要忽略指定的警告,使用 <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas" target="_blank" rel="noopener">Clang 的编译特性</a> 。</p><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>1、在 <em>extension</em> 和 <em>implementation</em> 之间添加一行空格。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@interface MyClass ()</span><br><span class="line"></span><br><span class="line">// Properties - empty line above and below</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation MyClass</span><br><span class="line"></span><br><span class="line">// Body - empty line above and below</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>2、在 <em>@end</em>之后添加一空行</p><p>3、使用 <em>pragma mark</em>之后添加一行空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (CGSize)intrinsicContentSize &#123;</span><br><span class="line">return CGSizeMake(12, 12);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Private</span><br><span class="line"></span><br><span class="line">- (void)setup &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、操作数学运算符时在运算符俩侧添加空格。一元运算符不用。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSInteger index = rand() % 50 + 25;</span><br><span class="line">index++;</span><br><span class="line">index += 1;</span><br><span class="line">index--;</span><br></pre></td></tr></table></figure><p>5、在进行逻辑判断时，在 <em>if</em> 之后添加一个空格，并在 <em>{</em> 之前添加一个空格。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (alpha + beta &lt;= 0) &amp;&amp; (kappa + phi &gt; 0) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、对于多参数的方法，除非方法签名大于或等于3行，否则不要换行。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// blocks are easily readable</span><br><span class="line">[UIView animateWithDuration:1.0 animations:^&#123;</span><br><span class="line">   // something</span><br><span class="line">&#125; completion:^(BOOL finished) &#123;</span><br><span class="line">   // something</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// colon-aligning makes the block indentation wacky and hard to read</span><br><span class="line">[UIView animateWithDuration:1.0</span><br><span class="line"> animations:^&#123;</span><br><span class="line">                 // something</span><br><span class="line">             &#125;</span><br><span class="line">             completion:^(BOOL finished) &#123;</span><br><span class="line">                 // something</span><br><span class="line">             &#125;];</span><br></pre></td></tr></table></figure><p>7、不要在对象类型前和 <em>protocol</em>之间添加空格。</p><p>推荐：</p><pre><code>@property (nonatomic, weak) id&lt;SGOAnalyticsDelegate&gt; analyticsDelegate;</code></pre><p>反对：</p><pre><code>@property (nonatomic, weak) id &lt;SGOAnalyticsDelegate&gt; analyticsDelegate;    </code></pre><h2 id="其他Objective-C-风格指南"><a href="#其他Objective-C-风格指南" class="headerlink" title="其他Objective-C 风格指南"></a>其他Objective-C 风格指南</h2><p>如果感觉不太符合口味，可以看看下面的风格指南：</p><ul><li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html" target="_blank" rel="noopener">Objective-C 编程语言</a></li><li><a href="https://developer.apple.com/legacy/library/documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html" target="_blank" rel="noopener">Cocoa 基本原理指南</a></li><li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" target="_blank" rel="noopener">Cocoa 编码指南</a></li><li><a href="https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html" target="_blank" rel="noopener">iOS 应用编程指南</a></li><li><a href="https://github.com/NYTimes/objective-c-style-guide" target="_blank" rel="noopener">纽约时报 移动团队 Objective-C 规范指南</a></li><li><a href="https://github.com/RobotsAndPencils/objective-c-style-guide" target="_blank" rel="noopener">Robots &amp; Pencils Objective-C Style Guide</a></li></ul><p>其他</p><ul><li><a href="https://github.com/raywenderlich/objective-c-style-guide" target="_blank" rel="noopener">raywenderlich.com</a></li><li><a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml" target="_blank" rel="noopener">Google</a></li><li><a href="https://github.com/github/objective-c-style-guide" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://trac.adium.im/wiki/CodingStyle" target="_blank" rel="noopener">Adium</a></li><li><a href="https://gist.github.com/soffes/812796" target="_blank" rel="noopener">Sam Soffes</a></li><li><a href="http://cocoadevcentral.com/articles/000082.php" target="_blank" rel="noopener">CocoaDevCentral</a>)</li><li><a href="http://www.cimgf.com/zds-code-style-guide/" target="_blank" rel="noopener">Marcus Zarra</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;点语法&quot;&gt;&lt;a href=&quot;#点语法&quot; class=&quot;headerlink&quot; title=&quot;点语法&quot;&gt;&lt;/a&gt;点语法&lt;/h2&gt;&lt;p&gt;应该 &lt;strong&gt;始终&lt;/strong&gt; 使用点语法来访问或者修改属性，访问其他实例时首选括号（对比下面的属性）。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.idechao.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.idechao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>快速开始</title>
    <link href="http://www.idechao.com/2019/05/27/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.idechao.com/2019/05/27/快速开始/</id>
    <published>2019-05-27T09:42:42.684Z</published>
    <updated>2019-12-09T15:50:36.102Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="多个category语法"><a href="#多个category语法" class="headerlink" title="多个category语法"></a>多个category语法</h2><h3 id="子分类"><a href="#子分类" class="headerlink" title="子分类"></a>子分类</h3><p>下面的分类会将该分章放到 Java/Servlet这个分类下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Java</span><br><span class="line">  - Servlet</span><br></pre></td></tr></table></figure><p>同样的作用我们也可以这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: [Java, Servlet]</span><br></pre></td></tr></table></figure><p>上面两种方法最终效果一样，都是将文章放在了一个子分类的目录下，效果如图。</p><p> <img src="/images/quickstart-category.png" alt></p><h3 id="多个分类"><a href="#多个分类" class="headerlink" title="多个分类"></a>多个分类</h3><p>如果我们的要求是将文章同时分到多个不同的分类中呢，我们应该这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [Java]</span><br><span class="line">  - [Servlet]</span><br></pre></td></tr></table></figure><p>这样，就可以将上面的文章分类到 <code>Java</code> 和 <code>Servlet</code> 这两个不同的目录中了。</p><p>扩展一下，如果我们将其分类到 <code>Java/Servlet</code> 和 <code>Programming</code> 两个不同的目录下，我们应该如下写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [Java, Servlet]</span><br><span class="line">  - [Programming]</span><br></pre></td></tr></table></figure><h2 id="hexo引用图片"><a href="#hexo引用图片" class="headerlink" title="hexo引用图片"></a>hexo引用图片</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><h2 id="新建菜单menu存放归档文章"><a href="#新建菜单menu存放归档文章" class="headerlink" title="新建菜单menu存放归档文章"></a>新建菜单menu存放归档文章</h2><h3 id="如何新建文件到自定义目录menu下"><a href="#如何新建文件到自定义目录menu下" class="headerlink" title="如何新建文件到自定义目录menu下"></a>如何新建文件到自定义目录menu下</h3><p>新建的menu，里面设置路径的时候，要以category的方式来处理，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  Books: /categories/books/ || book # 这里是新增加的菜单</span><br><span class="line">  Movies: /movies/ || film</span><br><span class="line">  archives: /archives/ || archive</span><br></pre></td></tr></table></figure><p>新建的文件就可以直接放到books文件夹下，这样就应该直接展示出来了。</p><blockquote><p>这里网上有描述说是需要加上 <code>categories: books</code> 或者 <code>type: books</code>，不过我直接放到目录下，没有设置是没问题的，所以我这里就先不设置了，如果不展示可以尝试设置一下</p></blockquote><h3 id="隐藏自定义菜单menu的评论"><a href="#隐藏自定义菜单menu的评论" class="headerlink" title="隐藏自定义菜单menu的评论"></a>隐藏自定义菜单menu的评论</h3><p>默认的新建菜单，下面都带有评论，可以直接关闭。</p><p>打开自定义menu下的<code>index.md</code>文件，增加隐藏评论的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comments: false</span><br></pre></td></tr></table></figure><h2 id="category和tag理解"><a href="#category和tag理解" class="headerlink" title="category和tag理解"></a>category和tag理解</h2><p>拿超市的货品来作例子: </p><ul><li>Category 就是不同货架</li><li>Label 好比是贴在商品上的描述信息标签</li><li>Tag 则可以是临时添加的标记，比如「废弃」、「价格过期」</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
