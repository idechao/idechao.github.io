<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>idechao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.idechao.com/"/>
  <updated>2020-07-07T11:45:15.982Z</updated>
  <id>http://www.idechao.com/</id>
  
  <author>
    <name>idechao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端学习路线</title>
    <link href="http://www.idechao.com/2020/07/06/web/h5-study-route/"/>
    <id>http://www.idechao.com/2020/07/06/web/h5-study-route/</id>
    <published>2020-07-06T03:47:19.000Z</published>
    <updated>2020-07-07T11:45:15.982Z</updated>
    
    <content type="html"><![CDATA[<p>从我学习的过程中，遇到的难点，已经学习经历，总结下应该学习的知识点。</p><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li><p><a href="https://www.npmjs.cn/" target="_blank" rel="noopener">npm中文网</a></p><p>  基本的介绍，安装，命令大全，开始时不建议看，可能突然看到这么多，并没有什么重点，大致过一下，有点印象就行，知道有这么个东西，具体使用的时候可以自行百度去查具体实现。</p><p>  觉得熟悉后，可以当做字典来用。</p></li><li><p><a href="https://juejin.im/post/5ef7e0066fb9a07e976bc89e?utm_source=gold_browser_extension" target="_blank" rel="noopener">Node.js 进阶-你应该知道的 npm 知识都在这！</a></p><p>  掘金上的一片介绍文章，有基本的介绍说明，常用的文件的理解等，比较好的一篇文章。</p></li><li><p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">npm scripts 使用指南</a></p><p>  阮老师的进阶文章，脚本是npm最强打的功能之一。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从我学习的过程中，遇到的难点，已经学习经历，总结下应该学习的知识点。&lt;/p&gt;
&lt;h1 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title> Visual Paradigm绘制流程图、时序图.md</title>
    <link href="http://www.idechao.com/2020/01/09/tools/Visual-Paradigm%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%97%B6%E5%BA%8F%E5%9B%BE/"/>
    <id>http://www.idechao.com/2020/01/09/tools/Visual-Paradigm绘制流程图时序图/</id>
    <published>2020-01-09T13:10:42.000Z</published>
    <updated>2020-01-16T07:16:35.472Z</updated>
    
    <content type="html"><![CDATA[<p>开发过程中，需要绘制各种流程图、时序图等，网上也有很多软件，不过使用下来，感觉功能最强大的，就是 Visual Paradigm。</p><p>下面介绍基本的入门操作。</p><h1 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h1><p>默认下载下来，是英文版的。想我这种勉强能说个 ”Hello World“ 的人来说还是有点难受的。软件本身支持语言的切换，无需下载插件。</p><p>先说下主流程：</p><p><strong>Window–&gt;Application Options–&gt;Appearance–&gt;User language–&gt;Simplified Chinese.</strong></p><p>选中application options：</p><p><img src="/images/vp-language-1.png" alt></p><p>切换语言：</p><p><img src="/images/vp-language-2.png" alt></p><p>然后点击应用，重启，展示中文，完美~~</p><h1 id="创建流程图"><a href="#创建流程图" class="headerlink" title="创建流程图"></a>创建流程图</h1><p>点击最左边的按钮，”图标总管“， 竖着排列的那些，然后选择Flowchart，选择Basic Flowchart。</p><p><img src="/images/vp-flow-1.png" alt></p><p>或者参照下图，直接搜索 <strong>flowchart</strong>:</p><p><img src="/images/vp-flow-2.png" alt></p><h1 id="导出保存问题"><a href="#导出保存问题" class="headerlink" title="导出保存问题"></a>导出保存问题</h1><p>正常保存，可以导出为 .vpp 文件。</p><p><img src="/images/vp-save.png" alt></p><p>导入的时候，得从上面选择导入，不能直接拖拽进来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发过程中，需要绘制各种流程图、时序图等，网上也有很多软件，不过使用下来，感觉功能最强大的，就是 Visual Paradigm。&lt;/p&gt;
&lt;p&gt;下面介绍基本的入门操作。&lt;/p&gt;
&lt;h1 id=&quot;切换语言&quot;&gt;&lt;a href=&quot;#切换语言&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="tools" scheme="http://www.idechao.com/categories/tools/"/>
    
    
      <category term="Visual Paradigm" scheme="http://www.idechao.com/tags/Visual-Paradigm/"/>
    
  </entry>
  
  <entry>
    <title>小狗钱钱</title>
    <link href="http://www.idechao.com/2019/12/27/books/%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1/"/>
    <id>http://www.idechao.com/2019/12/27/books/小狗钱钱/</id>
    <published>2019-12-27T14:47:46.000Z</published>
    <updated>2019-12-28T12:11:02.540Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;小狗钱钱是一本理财类的书，讲的主人公是个小孩子，在生活中，陷入财务危机，这个说的有点严重，应该说是缺钱了。然后收留了一直小狗，取名钱钱，小狗钱钱会说话，然后教会了主人公理财的方法。逐渐的，主人公的钱袋子就逐渐丰厚起来。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对于感想，写下总结内容。想到哪写到哪，没有一定的顺序。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;需要把资金进行管理。50%放入生蛋的”鹅”中，20%和20%放入梦想储蓄罐，剩余10%，当做自由资金。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;炒股是个正确的选择，每次收益，对收益部分做部分调整。大部分拿到另个一个账户，用户短线处理，大胆，果断，不犹豫，不纠结。再拿出一小部分，放到投入到基金中。其实我不是很喜欢基金，但是为了分散一部分风险，还是持续增加一下。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;要坚持写成功笔记。这是一个很重要的习惯。我现在就是习惯写博客，包括技术博客，股票投资记录，读书笔记等。而且要习惯把日常的东西记录下来，没准儿偶尔飘过的想法也会产生很大的作用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;要勇于尝试。小女孩敢在学校做演讲，没准现在的我在那么多人面前都不会那么从容淡定。包括现在在学的新技术，在开始的时候一个脑袋两个大，多练习之后，也会逐渐找到自信，熟能生巧，讲究的就是量变到质变的一个过程。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;持续学习股票知识。虽然在投资股票，但是现在并没有一套自己的理论，大多数在抄作业。虽然这也能获取一部分利润，但是在自己掌握的情况下，可能会产生更好的收益。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;72小时原则。想好了一件事情之后，要在72小时内完成，否则这件事情，有很大的概率不会去做了。比如想写个博客，然后想了想去玩了把游戏，推来推去的，这篇幅博客基本就写不成了。举个我的实际例子，想到出去旅行，兴致勃勃，但是没能及时买票做攻略，到后来就不了了之了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最好不要使用信用卡。我现在也很少使用信用卡，基本都解绑了，只留着晚上打车的的费用使用信用卡，或者大额的情况下，因为信用卡的权益部分还是不错的，但是每个月结束，都会去查看账单，去对一下。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;理财真的很重要，收入越高的人，消费也会跟着升级，没有达到一定程度，也是会资金紧张的。我有个朋友，年入也是百万的，也经常跟别人借钱，当然，他也是有能力还上去的。这里只是说明一些，理财应该在普遍的环境中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;小狗钱钱是一本理财类的书，讲的主人公是个小孩子，在生活中，陷入财务危机，这个说的有点严重，应该说是缺钱了。然后收留了一直小狗，取名钱钱，小狗钱钱会说话，然后教会了主人公理财的方法。逐渐的，主人公的钱袋子就逐渐丰厚起来。&lt;/p&gt;
      
    
    </summary>
    
      <category term="books" scheme="http://www.idechao.com/categories/books/"/>
    
    
      <category term="理财书籍" scheme="http://www.idechao.com/tags/%E7%90%86%E8%B4%A2%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>VSCode使用</title>
    <link href="http://www.idechao.com/2019/12/19/tools/VSCode%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.idechao.com/2019/12/19/tools/VSCode使用/</id>
    <published>2019-12-19T12:45:42.000Z</published>
    <updated>2020-01-09T13:14:30.268Z</updated>
    
    <content type="html"><![CDATA[<p>vscode是一个强大的编辑器。发现之后，就对其他编辑器没有什么想法了。</p><p>下面就记录下来常用的一些操作和配置的东西。</p><h1 id="vscode介绍"><a href="#vscode介绍" class="headerlink" title="vscode介绍"></a>vscode介绍</h1><p>知乎上有vscode的一篇介绍，<a href="https://zhuanlan.zhihu.com/p/35303567?spm=ata.13261165.0.0.77c31859FW62VV" target="_blank" rel="noopener">Visual Studio Code有哪些工程方面的亮点</a>，值得阅读。</p><h1 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h1><p>编辑器操作:</p><ul><li style="list-style: none"><input type="checkbox"> 隐藏左边目录栏 <code>command + b</code></li><li style="list-style: none"><input type="checkbox"> 显示隐藏终端 <code>control + `</code></li></ul><p>文件操作:</p><ul><li style="list-style: none"><input type="checkbox" checked> 注释，使用 <code>command + /</code> 可以把选中的行都注释掉 </li><li><p>[ ] 注释，使用 <code>shift + alt + a</code> 可以把选中的内容注释掉</p><p>  上面两个注释的区别就是，当选中的内容不是完整的两行的情况下，第一个会把两行都注释掉，第二个只会注释选中的内容</p></li><li><p>[ ] 上下移动行 <code>alt + up/down</code></p></li><li style="list-style: none"><input type="checkbox"> 复制当前行 <code>shift + alt + up/down</code></li><li style="list-style: none"><input type="checkbox"> 删除当前行 <code>command + shift + k</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vscode是一个强大的编辑器。发现之后，就对其他编辑器没有什么想法了。&lt;/p&gt;
&lt;p&gt;下面就记录下来常用的一些操作和配置的东西。&lt;/p&gt;
&lt;h1 id=&quot;vscode介绍&quot;&gt;&lt;a href=&quot;#vscode介绍&quot; class=&quot;headerlink&quot; title=&quot;vsc
      
    
    </summary>
    
      <category term="tools" scheme="http://www.idechao.com/categories/tools/"/>
    
    
      <category term="VSCode" scheme="http://www.idechao.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>股票投资实录</title>
    <link href="http://www.idechao.com/2019/12/12/stock/%E8%82%A1%E7%A5%A8%E6%8A%95%E8%B5%84%E5%AE%9E%E5%BD%95/"/>
    <id>http://www.idechao.com/2019/12/12/stock/股票投资实录/</id>
    <published>2019-12-12T15:32:19.000Z</published>
    <updated>2020-01-08T12:30:56.466Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="eaa20b33a69e1547e0851a1fb5bb2d8316eb166e75a39e3b243b552b08323895">a54a2cbf1c08c076e56153d9cabc95f928562e6200bd68ff4e9aa780f57a562cf748a81e24480d52b0b1d2761d45513d5bd912d20981b63be3dc6ca9cd5946064122c57f5a3f438c9db42dc7e49b251f6387f96eef45e4d3a671ecc12964049bf10e1dda12b2216678931fb6f7f0e333e31b4be056416c3438a64c9f561eaa8b6a1fbc2cbb47d5d6a5e385a9db884e800dc2e0ded1c1dcdf2d60f4c4a95451813d0abbce228d8cdf085cf1b31790d77af07432ca1348b22e75fdea68f83cf1fa1799248a980236340186be01a0c1aedd8e34dc5b0f706d695763b5c616c8de4fa53e929ab44be29d4a07000e410609b309a5041a730a2b02879b87728643303f81542e161f0d6f68252a115e8b08595dccbccc94f1749c11b246b863ebd9734083cb22b3d860f7010aedc0cac2f42bbc1cb81874b2990bbe6225ff0a85035e8688643376a14e8655c0920d1550352b5c2c8c9a4b44046a05d4ad1fce8301670eed5d4820bb6680e19bf9cd07cdc10e8bbff694fea16306470b32937b632036658c6f16ac786d11066cd637dadb69509a84bce02c043c8210e4dbe8e6b7d74c9d5718362aa4b67c4760793b8f791f69caf9d1e3b61a1391f24f467d657ecd32553440361fe056a08c99f0a276d1ba6cb197031a13425c9558115ea02558772ae2f94ee1d45c23e4e677e245fc1a3d90947e9f99110f82eef804ba05af8c06fde1cd07cd169460bb252bd9ce057d41c1247e21923aadef1350955aee9f980be59bd0055cd587ac3c53b1804137d6c56816c482556ff51d6a408d985b53d3ed689c6bdcf46932c201101650869b08a80bef9bc2459aa7b76c706461e7ff77b5677f9c4263f59d39e176f2300414c75cbc18c5583a19078e45171e45c40edbb0029f84b357fcb9754e14b5530bc569a7eb27318269d72dc1143b1a4388bbed0856a8208acfda6ed901368b2e62f330cb37f72761446b764b7a7a9986d5425f1aa77fad7c17aa408ef599a2cbaaed08cb08973abed37caf856f4aca84c9e092bcddfee8bfdb3d54ccf9e0fd1e7306a103515bbe181b63021d20c9f458183d4092e1e244c41a0eacf3e0f6cc90976e0a4e5f1b93f0848189ba25e47764108ef025103f95ad497eff6564e2e161ad3cd0c264ff4295472c56cc68025c0197f150b869f7d5c86dd2c6294033b373c40203f85c06a02c6ba94265bfc62a9752a66a990510674020360dca352af90ed3adfffc39d45e24fda992ecdd18bdff043ed457aae46a265ab42d149e7da361b097107150880304cc0f99adfe873355ec82117cc500cf03dc6761492534b7e668ab9e458998bff7de305a013596e2476e8c05563fccba087ec51a5a35f904861ba6a752cdc11843138e063bbd6edd827378224d1f85f63727b2977896d771f1da25bb2df642f3d0f84ba6a7840e9a132ad7a136242495d24a9f3d422e39cf652ed19df233e7579144d7adf7ce911597c6bf63b2d928fe7e4c4c0758add3a57c105fde252ed8ae899b8f3acde073d30756fa098fdcfd6d4fa440b82ebf4004bb696803ecda745ac83ea7be4be23006e4634436faf555d5b1a26c2493d390c65ab6863cb663a98bc0fae5d4fd8d39c8feef0b76f3f992c3942ed31b601f92a9de7bb0686fdf024cf22a25cb43e169b692d4feb88972b9514131900a40e00d03eb91b8ddc1a76efff76bda1e22898dcd10d45a0c6bf570f1e9b3ed89a2eb4745fb5979b25e65e4b632cd71dafc6149831fa08abc16077fd99be1581625f036f5b6a1813ea196e8cab1251585c2f4a74121928a904247ea7d899e9625c84d41c49c2c17a3906f35a5428a26bbbe4c7d9a6eb059e75758a3e90ef6d503fd19298ff77d4baa3767e248f2dbd49fc53700ea9f681fee27ad9855f1e7997d4349f72383d0a0d113f4e4d4cac84de54f37319a3c83a4ef36e9ddf0ffe4897415d8ff4e962ad0133054d298430e42518b22023d80ab007fa5b21d095bebebcbda28230dd492f6a4fc01bb5c58663d31c3af897ae7415f1e8fe289a911e8c040fe190c312735d8747eb338a0c46219ac84b15c153b57e5a9e69f499d6739b4de50d9dbfe15c5317d8c3416be108d8b8f7761f225c8603abe9517d6dfe55c4e9a9fc529049b59414e8564eef6c495bf061bf221f197286fcb6a3c2a3eb13cb2098bac631aa4d64502b0c6c8ac115e07cbc29d734403cb6c2be41668e713938210ef974196a57f82dd10037e65227b71678efe106dc33dbc958da77cb73b5ca4009f1a2f7b3247cdf2782bc40dc65242ccb9ac8507705f19b2ff1dffbda37137b32f64e3693ad5e4a7b91a92ad84e11993e2c4b273353212852cb38745aeb567da928f25023401b504085ec4b7c4c135e6318dc9d7fa6af5fa8dc4c86c6225ea6c8622141505bc572a4ecce110a2043e8dacb637de0f8d56d607dc62d25d4e3d4949807d563a10afefa27cd2f14941c6c9c10d39dff5081cefb2b5138e42ca8685ae1eecfc9506c6823bde25e944859659df6846bf797ab498a5cb37aabd5c946035677a3c0b437efdefbfc22d28ad1e2cc375204658bd39ab33e32294c9692e3931d33e645f7d8e408a37aa39c249ce1e3a38da175b8c0109347697bed62dc4b7d683553fccf0a96d587f254346c40442ff7ed5f05a6ca631ff80fe0ab487c25536b0f7063ee88323b0e1f0be6418456642866c818507336df0e7e502769f51035236120860fc710732c19e67a5f6c2852db1f70da5d067529e383eed228ea4626b56d12d026c459c6317fe95d70f0a2f9c8f1ad55eb905c34bc4e0dc10a7778cbf5031cf55c74580900fa79b5ffb86591a01c143d1b2b09fe68cec6329d60e24884a14ee6ac6c85a277265b3243610d458c5e9bafb4de64cc22ee3a6130ec099cbbdda12009af331b09ca313f0e98117ebd0dadfdce8724cd0c162b97f906231eabc7f84a6b0b82a831ef854b51102c71c6b3c78691dadc00841fd460fe44d21f2bd401e4946bedf625179e7582bc51d902d864b60d83842231371d9ed0d0a4b0c2a44a3dd337a50b1084c47a5dc1ed38e9dea9d05ecfc051e23a2929f88aa80262e6dc1ab8ece954fb4c50c8678ba0a188b153d4c5bc035b5a4b2d4d75d7bc3cebb66a0a32112e78789a2bfe4f4fe091717ef01deea2d8beeb48df754db9237f355d43afc6dc113b310feb53dd3b4d2a1855e37b5ee3308f5b92cb0fde63cc8e79100e398db5051d3904a4e13642b729c266148ea71b2ead72a500fdd9b8d6c193b7386c652ecaf8ec9497eb52b7e52249a2ebed5c8eeee3e0fdcc94118c799a15a5a2d6196fe9b15d53785a77587067ea65adbf6097562c508d3b634abdb2e452dee794ae7c775c6992b0a83943eec8249c70f604b47469adb5d21e339005a260b9f1055f1f0bbd338abd5652afece2538736bac331685752dd00660cc2a6ae42f12357b8de70a7644afd9c109dc006278ba9cdfd8600033fb2a7ae094c4ce251c88dd161e5ed9c72c921a8155fbc7f94e34e7205248fb808475a278f4e8bb6dde487e0f1d4c1150ad619712a893a8288932eb93e3753158e25dfd92cf16a851094faf99ddbb1baacd339a622e971620f928dafb0d7abbb650a11abb444d82e01718834dcf807cd58af5989bbfba6dc35d23c291fd660fd014135337e1e0d5a5e7dd45f745a6525822c545a0cb25ff2c100bd9eb2506fc9517765da52cb628ec6d2e3f0615f476802a0e647dbf41e3fa7558da36f0abcabd296cd471a34dd43f46ec62d4a4e65e7a748e27ed7ce131c5d90734ddfa902a6644e8b5f704a109b7645f6e0ce0d381d92295835960227671aa0369abbf9547254adf37d817b918e12e050855918084fee4ebfa0da0891c909ae029d406ed9c786f571ee6c1cd5b4933a96ccf1de42ff5810dfdfbfd266f5cd8fb559efb07eb0aa5f61ccfd70e46ea32db2113ee2b296394ab9325a2afd2c1b7257f502cb30d8bbf51d24ed352fdbd69cef7dfef1bbab09501ebb7d39b4e3a93082872bc5e2402ac1f6562ceeff98d64cf3524e654aa6be92036cef5c3f517d31db1bd6d11d26c4af9f2c545757ba3164fdb8420ea8118d5c1c3e5e1525557d0424fb4fb480e79bf34590664d2ce15f363c223efa79b085f184476e32d37d3f2c5a505a4979efca2169a38ce9f8b42de542d943013d6772d636e1c9a9257263a874e05eda95bb935e42bd2f34d98944a6ea20313d46cbc6a051f9e500cf27207c79ac7a0fd822af0bca14b9536b9387eee57e5f86610d091c3c49a4c62be30b39416bce96ea6f6260a8e66875b7a3e70952cd078399e1c8aa0e878f4c6314a28b107328691e0c753fa6134342621e59e0006386289a51cfcba5de31fb54aa4c5b1c6f03bf7990cbfd2fc97af82c15f5cc4bec51c37fa130eff38f382c7ba280928a00a49da0589dff9716a54ca5d56c784f521fde9ebac25db8da8e2159a8a6a5ee19c3c03a077363a0de5b85691a5cd87f0dd5215916924f97aabcb534bf6ce22fe2364abf5c3d2faa2e9fd2435d1bef36b6e4e638d3c0db2316cc6180eb1371b524b0726e8aa1a9bcafcfbfbd63da09fb4164378f7483dd99ca0f70a9e09f675468e594f3fad204b53c9dddabbd6f0449892eea2a32f6eeb0e9bb4fa5e8d997923512ba75a212f042eb3f8bb3bf9a77371754bd4e9c787d430fcffbdb628f24564343263267ebeb0a69772314c510a745c55a1e2e9ccb6d350568265b252698af48415c8f8c8583cfeb71da586b80475ee135c36c6665f511a67129f759d9c802f8349112ade1430ed4973c5e017d3b525fa86f6d232d357c763e37ab47c8d551958fbb7a23f16771f0c62324729efb22624d35ae6779ed6285f6b6a35e098d96b7da87408a93cc844003f42e812eddecbc11dad3def88defd193019fa65936795af90a7afe8f04157b6c7f16774d3739925d21dd4558e37cb4c5af80cbb7845d15daa3f03356af2e8d55f3c38df062cd8fc9bfc03a6e3beaa2d5951dc50e054a653353ca5039b33</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      股票投资实录
    
    </summary>
    
      <category term="投资理财" scheme="http://www.idechao.com/categories/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="股票" scheme="http://www.idechao.com/tags/%E8%82%A1%E7%A5%A8/"/>
    
  </entry>
  
  <entry>
    <title>css常见问题小记</title>
    <link href="http://www.idechao.com/2019/12/09/web/css-normal-question/"/>
    <id>http://www.idechao.com/2019/12/09/web/css-normal-question/</id>
    <published>2019-12-09T06:31:07.000Z</published>
    <updated>2020-06-11T09:55:22.314Z</updated>
    
    <content type="html"><![CDATA[<p>css日常开始时，遇到的问题，通过搜索找到的答案，做下总结。</p><h1 id="less参考"><a href="#less参考" class="headerlink" title="less参考"></a>less参考</h1><p><a href="https://less.bootcss.com/" target="_blank" rel="noopener">less</a></p><h2 id="amp-符号解释"><a href="#amp-符号解释" class="headerlink" title="&amp;符号解释"></a>&amp;符号解释</h2><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.head&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  border: 1px solid gainsboro;</span><br><span class="line">  background-color: #000000;</span><br><span class="line"></span><br><span class="line">  .content&#123;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.body&#123;</span><br><span class="line">    background-color: #72cc26;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.head &#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  border: 1px solid gainsboro;</span><br><span class="line">  background-color: #000000;</span><br><span class="line">&#125;</span><br><span class="line">.head .content &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.head.body &#123;</span><br><span class="line">  background-color: #72cc26;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以看到在类前面添加了<code>&amp;</code>之后，编译之后的<code>css</code>变为且的关系，而没有使用<code>&amp;</code>的<code>css</code>是父子的关系。</p><blockquote><p>这里需要注意.a.b和.a .b之间的区别，.a.b 是且的关系意思就是2者必须都具备，而.a .b是上下级，父子关系:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--.a.b--&gt;</span><br><span class="line">&lt;div class=&quot;a b&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!--.a .b--&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="类选择器的方式"><a href="#类选择器的方式" class="headerlink" title="类选择器的方式"></a>类选择器的方式</h1><ol><li>后代选择器, E1 E2, 选择所有被E1包含的E2。中间用空格分隔。匹配那些由第一个元素作为祖先元素的所有第二个元素(后代元素) ,不需要相匹配元素之间要有严格的父子关系</li><li>p,h2,h1, 将同样的定义应用于多个选择符</li><li>子元素选择器, X&gt;Y, ,只会匹配那些作为第一个元素的直接后代(子元素)的第二元素</li><li>.a.b，就是2者必须都具备，<code>&lt;div class=&quot;a b&quot;&gt;&lt;/div&gt;</code></li></ol><h1 id="flex布局汇总"><a href="#flex布局汇总" class="headerlink" title="flex布局汇总"></a>flex布局汇总</h1><p>参考链接：<br>知乎： <a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25303493</a></p><p>阮一峰总结：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><h2 id="容器上的属性"><a href="#容器上的属性" class="headerlink" title="容器上的属性"></a>容器上的属性</h2><ul><li>flex-direction：决定主轴的方向(即项目的排列方向)，默认值：row，主轴为水平方向，起点在左端。</li><li>flex-wrap：决定容器内项目是否可换行</li><li>flex-flow：flex-direction 和 flex-wrap 的简写形式</li><li>justify-content：定义了项目在主轴的对齐方式。</li><li>align-items：定义了项目在交叉轴上的对齐方式</li><li>align-content：定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</li></ul><h2 id="item上的属性，子元素"><a href="#item上的属性，子元素" class="headerlink" title="item上的属性，子元素"></a>item上的属性，子元素</h2><ul><li>order：定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0</li><li>flex-basis：定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间；当主轴为水平方向的时候，当设置了 flex-basis，项目的宽度设置值会失效，flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</li><li>flex-grow：定义项目的放大比例</li><li>flex-shrink：定义了项目的缩小比例</li><li>flex：flex-grow, flex-shrink 和 flex-basis的简写。快捷键如下：<ul><li>flex: auto (1 1 auto) </li><li>flex: none (0 0 auto)</li><li>flex: 1； flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，意思就是剩余元素撑满空间</li><li>flex: 0；对应的三个值分别为 0 1 0%</li><li>flex: 0%; flex: 24px; 当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）</li></ul></li></ul><h1 id="文本一行，超出显示…"><a href="#文本一行，超出显示…" class="headerlink" title="文本一行，超出显示…"></a>文本一行，超出显示…</h1><p>效果如下图：</p><div style="display:flex;border:1px solid red;"><br>        <div style="text-overflow: ellipsis;            overflow: hidden;            white-space: nowrap;            display:block;"><br>        做 Web 开发的同学应该比较熟悉 Postman ，一个 HTTP API 测试工具。它是一个基于 Electron 开发的客户端软件，支持 OSX，Window 和 Linux。Postman 功能非常强大，支持 REST，SOAP 和 GraphQL 请求，可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等。总之，对开发 Web API 来说，Postman 是一个非常好的工具。<br>        </div><br></div><p>实例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- div元素 --&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    做 Web 开发的同学应该比较熟悉 Postman ，一个 HTTP API 测试工具。它是一个基于 Electron 开发的客户端软件，支持 OSX，Window 和 Linux。Postman 功能非常强大，支持 REST，SOAP 和 GraphQL 请求，可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等。总之，对开发 Web API 来说，Postman 是一个非常好的工具。</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- less语法如下 --&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line"></span><br><span class="line">    .content &#123;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        </span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>content</code>标签里的前三个是必须的。</p><p>虽然有时候测试的时候，hidden不写也生效了，但是规范一些，还是需要增加上。</p><p><code>display: block;</code>这个，最好也是增加上，在不生效的情况，应该增加这个属性。</p><h1 id="文本两行"><a href="#文本两行" class="headerlink" title="文本两行"></a>文本两行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-line-clamp: 2;（行数）</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">max-height: 100px;</span><br></pre></td></tr></table></figure><p>参照上面的代码，最大高度自己适配。</p><p>其中，上述代码在小程序中，<span style="color:red;font-weight:bold;">只能使用view控件，不能使用text控件</span></p><h1 id="list文本在一行，超出不展示"><a href="#list文本在一行，超出不展示" class="headerlink" title="list文本在一行，超出不展示"></a>list文本在一行，超出不展示</h1><ul><li style="list-style: none"><input type="checkbox"> 设置高度固定</li><li style="list-style: none"><input type="checkbox"> 设置flex-wrap: wrap; 貌似无需设置overflow: hidden;</li></ul><h1 id="设置两个视图顶部对齐"><a href="#设置两个视图顶部对齐" class="headerlink" title="设置两个视图顶部对齐"></a>设置两个视图顶部对齐</h1><p>比如a需要设置顶部和b对齐，但是b的高度是自动撑开的，不知道本身的高度。</p><p>这时候就可以在外面再包一层，然后a和b都设置为absolute，这样顶部就可以对齐了。</p><h1 id="文本垂直居中"><a href="#文本垂直居中" class="headerlink" title="文本垂直居中"></a>文本垂直居中</h1><p>这个方法只能将单行文本置中。只需要简单地把 <code>line-height</code> 设置为那个对象的 height 值就可以使文本居中了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;content&quot;&gt; Content here&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#content &#123;</span><br><span class="line">height: 100px;</span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>适用于所有浏览器</li><li>无足够空间时不会被截断</li></ul><p>缺点：</p><ul><li>只对文本有效(块级元素无效)</li><li>多行时，断词比较糟糕</li></ul><p>这个方法在小元素上非常有用，例如使按钮文本或者单行文本居中。</p><h1 id="设置sticky类型-居顶"><a href="#设置sticky类型-居顶" class="headerlink" title="设置sticky类型,居顶"></a>设置sticky类型,居顶</h1><p>固定定位是将某个元素固定在浏览器的某个确定的位置，不随滚动条的移动而变化；</p><blockquote><p>注意：固定定位的位置是  <strong>相对当前浏览器窗口</strong>  的；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:fixed;  right:100px;  top:100px;</span><br></pre></td></tr></table></figure><p><strong>这里设置top来控制位置，而非margin-top.</strong></p><h1 id="容器中两个元素，第一个伸长的长度做控制"><a href="#容器中两个元素，第一个伸长的长度做控制" class="headerlink" title="容器中两个元素，第一个伸长的长度做控制"></a>容器中两个元素，第一个伸长的长度做控制</h1><p>标题不好描述，直接看图吧：</p><p><img src="/images/css-flex-1.png" alt></p><p>其中外层容器固定，a和b的长度不固定。当a超长的情况下，b依旧展示,a会显示…的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line"> display: flex;</span><br><span class="line"> overflow: hidden;</span><br><span class="line"> justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.a &#123;</span><br><span class="line"> flex-shrink: 1;</span><br><span class="line"> overflow: hidden;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 下面说明是一行 --&gt;</span><br><span class="line"> text-overflow: ellipsis;</span><br><span class="line"> overflow: hidden;</span><br><span class="line"> white-space: nowrap;</span><br><span class="line">  </span><br><span class="line"> display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.b &#123;</span><br><span class="line"> flex-shrink: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;css日常开始时，遇到的问题，通过搜索找到的答案，做下总结。&lt;/p&gt;
&lt;h1 id=&quot;less参考&quot;&gt;&lt;a href=&quot;#less参考&quot; class=&quot;headerlink&quot; title=&quot;less参考&quot;&gt;&lt;/a&gt;less参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="CSS" scheme="http://www.idechao.com/categories/CSS/"/>
    
    
      <category term="css日常开发" scheme="http://www.idechao.com/tags/css%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>富爸爸穷爸爸</title>
    <link href="http://www.idechao.com/2019/12/07/books/%E5%AF%8C%E7%88%B8%E7%88%B8%E7%A9%B7%E7%88%B8%E7%88%B8/"/>
    <id>http://www.idechao.com/2019/12/07/books/富爸爸穷爸爸/</id>
    <published>2019-12-07T15:28:46.000Z</published>
    <updated>2019-12-28T05:08:08.751Z</updated>
    
    <content type="html"><![CDATA[<p>看看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看看&lt;/p&gt;

      
    
    </summary>
    
      <category term="books" scheme="http://www.idechao.com/categories/books/"/>
    
    
      <category term="理财书籍" scheme="http://www.idechao.com/tags/%E7%90%86%E8%B4%A2%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>前端学习路线</title>
    <link href="http://www.idechao.com/2019/07/06/web/js-study-log/"/>
    <id>http://www.idechao.com/2019/07/06/web/js-study-log/</id>
    <published>2019-07-06T03:57:28.000Z</published>
    <updated>2020-07-06T13:38:39.781Z</updated>
    
    <content type="html"><![CDATA[<p>做前端，总结下前端的学习过程</p><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p><a href="https://www.npmjs.cn/" target="_blank" rel="noopener">npm中文网</a></p><p><code>npm</code>是前端包管理工具，所有依赖都是根据<code>npm</code>来管理的。</p><p>先熟悉<code>npm</code>的基本命令，pageage文件的配置说明等</p><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>webpack是js程序打包模块。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做前端，总结下前端的学习过程&lt;/p&gt;
&lt;h1 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.cn/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="web" scheme="http://www.idechao.com/categories/web/"/>
    
      <category term="小程序" scheme="http://www.idechao.com/categories/web/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="前端" scheme="http://www.idechao.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C规范指南</title>
    <link href="http://www.idechao.com/2019/05/27/iOS/Objective-C%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/"/>
    <id>http://www.idechao.com/2019/05/27/iOS/Objective-C规范指南/</id>
    <published>2019-05-27T14:18:32.000Z</published>
    <updated>2019-12-06T12:12:21.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点语法"><a href="#点语法" class="headerlink" title="点语法"></a>点语法</h2><p>应该 <strong>始终</strong> 使用点语法来访问或者修改属性，访问其他实例时首选括号（对比下面的属性）。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">view.backgroundColor = [UIColor orangeColor];</span><br><span class="line"> </span><br><span class="line">[UIApplication sharedApplication].delegate;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[view setBackgroundColor:[UIColor orangeColor]];</span><br><span class="line"></span><br><span class="line">UIApplication.sharedApplication.delegate;</span><br></pre></td></tr></table></figure><h2 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h2><ul><li>一个缩进使用 4 个空格，永远不要使用制表符（tab）缩进。请确保在 Xcode 中设置了此偏好。</li><li>方法的大括号和其他的大括号（if/else/switch/while 等等）始终和声明在同一行开始，在新的一行结束。</li></ul><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (user.isHappy) &#123;</span><br><span class="line">// Do something</span><br><span class="line">&#125;</span><br><span class="line">else if (user.isOld) &#123;</span><br><span class="line">// Do something</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Do something else</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法之间应该正好空一行，这有助于视觉清晰度和代码组织性。在方法中的功能块之间应该使用空白分开，但往往可能应该创建一个新的方法。</li><li>@synthesize 和 @dynamic 在实现中每个都应该占一个新行。</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>条件判断主体部分应该始终使用大括号括住来防止出错，即使它可以不用大括号（例如它只需要一行）。这些错误包括添加第二行（代码）并希望它是 if 语句的一部分时。还有另外一种<a href="http://programmers.stackexchange.com/questions/16528/single-statement-if-block-braces-or-no/16530#16530" target="_blank" rel="noopener">更危险的</a>，当 if 语句里面的一行被注释掉，下一行就会在不经意间成为了这个 if 语句的一部分。此外，这种风格也更符合所有其他的条件判断，因此也更容易检查。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!error) &#123;</span><br><span class="line">return success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!error)</span><br><span class="line">return success;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!error) return success;</span><br></pre></td></tr></table></figure><p>##三目运算符<br>三目运算符(? :) ，只有当它可以增加代码清晰度或整洁时才使用。单一的条件都应该优先考虑使用。多条件时通常使用 if 语句会更易懂，或者重构为实例变量。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = a &gt; b ? x : y;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = a &gt; b ? x = c &gt; d ? c : d : y;</span><br></pre></td></tr></table></figure><p>##错误处理<br>当引用一个返回错误参数（error parameter）的方法时，应该针对返回值，而非错误变量。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSError *error;</span><br><span class="line">if (![self trySomethingWithError:&amp;error]) &#123;</span><br><span class="line">// 处理错误</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSError *error;</span><br><span class="line">[self trySomethingWithError:&amp;error];</span><br><span class="line">if (error) &#123;</span><br><span class="line">// 处理错误</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些苹果的 API 在成功的情况下会写一些垃圾值给错误参数（如果非空），所以针对错误变量可能会造成虚假结果（以及接下来的崩溃）。</p><p>##方法<br>在方法签名中，在 -/+ 符号后应该有一个空格。方法片段之间也应该有一个空格。构造方法使  <em><a href="http://clang.llvm.org/docs/LanguageExtensions.html#related-result-types" target="_blank" rel="noopener">instancetype </a></em> 作为返回类型来代替 <em>id</em> 。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)setExampleText:(NSString *)text image:(UIImage *)image;</span><br></pre></td></tr></table></figure><p>对于私有方法，应该加前缀用以区分。具体使用可以自行决定，建议使用p加下划线的方式：<em>p_</em> , p表示”private”，不建议使用单个下划线的方式，这种方式是预留给苹果使用的。</p><p>##变量<br>变量名应该尽可能命名为描述性的。除了 for() 循环外，其他情况都应该避免使用单字母的变量名。 星号表示指针属性变量，例如：<code>NSString *text</code>不要写成<code>NSString* text</code>或者<code>NSString * text</code>，常量除外。 </p><p>尽量定义属性来代替直接使用实例变量,同时声明内存的管理方式。如果一个属性只在 <em>init</em> 方法里设置了一次，声明为 <em>readonly</em> 。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection: NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *headline;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection : NSObject &#123;</span><br><span class="line">NSString *headline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection: NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic) NSString *headline;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>###变量限定符<br>当涉及到<a href="https://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226-CH1-SW4" target="_blank" rel="noopener">在 ARC 中被引入</a>变量限定符时， 限定符 (<strong>strong, </strong>weak, <strong>unsafe_unretained, </strong>autoreleasing) 应该位于最前面，如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__weak NSString *text</span><br></pre></td></tr></table></figure><p>##命名<br>尽可能遵守苹果的命名约定，尤其那些涉及到<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" target="_blank" rel="noopener">内存管理规则</a>，（<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" target="_blank" rel="noopener">NARC</a>）的。</p><p>长的和描述性的方法名和变量名都不错。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton *settingsButton;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton *setBut;</span><br></pre></td></tr></table></figure><p>类名和常量应该始终使用三个字母的前缀（例如 WRG）（常亮也可使用字母k开头），但 Core Data 实体名称可以省略。为了代码清晰，常量应该使用相关类的名字作为前缀并使用驼峰命名法。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval WRGArticleViewControllerNavigationFadeAnimationDuration = 0.3;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval fadetime = 1.7;</span><br></pre></td></tr></table></figure><p>属性和局部变量应该使用驼峰命名法并且首字母小写。</p><p>为了保持一致，实例变量应该使用驼峰命名法命名，并且首字母小写，以下划线为前缀。这与 LLVM 自动合成的实例变量相一致。 如果 <strong>LLVM</strong> 可以自动合成变量，那就让它自动合成。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@synthesize descriptiveVariableName = _descriptiveVariableName;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id varnm;</span><br></pre></td></tr></table></figure><p>##注释<br>当需要的时候，注释应该被用来解释 为什么 特定代码做了某些事情。所使用的任何注释必须保持最新否则就删除掉。</p><p>通常应该避免一大块注释，代码就应该尽量作为自身的文档，只需要隔几行写几句说明。这并不适用于那些用来生成文档的注释。</p><p>##init 和 dealloc<br><em>dealloc</em> 方法应该放在实现文件的最上面，并且刚好在 <em>@synthesize</em> 和 <em>@dynamic</em> 语句的后面。在任何类中，<em>init</em> 都应该直接放在 <em>dealloc</em> 方法的下面。</p><p>init 方法的结构应该像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)init &#123;</span><br><span class="line">self = [super init]; // 或者调用指定的初始化方法</span><br><span class="line">if (self) &#123;</span><br><span class="line">    // Custom initialization</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##字面量<br>每当创建 <em>NSString</em>， <em>NSDictionary</em>， <em>NSArray</em>，和 <em>NSNumber</em> 类的不可变实例时，都应该使用字面量。要注意 <em>nil</em> 值不能传给 <em>NSArray</em> 和 <em>NSDictionary</em> 字面量，这样做会导致崩溃。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = @[@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;];</span><br><span class="line">NSDictionary *productManagers = @&#123;@&quot;iPhone&quot; : @&quot;Kate&quot;, @&quot;iPad&quot; : @&quot;Kamal&quot;, @&quot;Mobile Web&quot; : @&quot;Bill&quot;&#125;;</span><br><span class="line">NSNumber *shouldUseLiterals = @YES;</span><br><span class="line">NSNumber *buildingZIPCode = @10018;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = [NSArray arrayWithObjects:@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;, nil];</span><br><span class="line">NSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @&quot;Kate&quot;, @&quot;iPhone&quot;, @&quot;Kamal&quot;, @&quot;iPad&quot;, @&quot;Bill&quot;, @&quot;Mobile Web&quot;, nil];</span><br><span class="line">NSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];</span><br><span class="line">NSNumber *buildingZIPCode = [NSNumber numberWithInteger:10018];</span><br></pre></td></tr></table></figure><p>##CGRect 函数<br>当访问一个 CGRect 的 x， y， width， height 时，应该使用<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGGeometry/index.html" target="_blank" rel="noopener">CGGeometry 函数</a>代替直接访问结构体成员。苹果的 CGGeometry 参考中说到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. </span><br><span class="line">For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. </span><br><span class="line">Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics.</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame;</span><br><span class="line"></span><br><span class="line">CGFloat x = CGRectGetMinX(frame);</span><br><span class="line">CGFloat y = CGRectGetMinY(frame);</span><br><span class="line">CGFloat width = CGRectGetWidth(frame);</span><br><span class="line">CGFloat height = CGRectGetHeight(frame);</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame;</span><br><span class="line"></span><br><span class="line">CGFloat x = frame.origin.x;</span><br><span class="line">CGFloat y = frame.origin.y;</span><br><span class="line">CGFloat width = frame.size.width;</span><br><span class="line">CGFloat height = frame.size.height;</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量首选内联字符串字面量或数字，因为常量可以轻易重用并且可以快速改变而不需要查找和替换。常量应该声明为 static 常量而不是 #define ，除非非常明确地要当做宏来使用。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static NSString * const WRGAboutViewControllerAuthorName = @&quot;Warning&quot;;</span><br><span class="line"></span><br><span class="line">static const CGFloat WRGImageThumbnailHeight = 50.0;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define AuthorName @&quot;Warning&quot;</span><br><span class="line">#define thumbnailHeight 2</span><br></pre></td></tr></table></figure><p>若常量局限于某个实现文件，则以k开头；若在其他类中可见，则以类名为前缀。</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>当使用 enum 时，建议使用新的基础类型规范，因为它具有更强的类型检查和代码补全功能。现在 SDK 包含了一个宏来鼓励使用使用新的基础类型 - NS_ENUM()</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, WRGAdRequestState) &#123;</span><br><span class="line">WRGAdRequestStateInactive,</span><br><span class="line">WRGAdRequestStateLoading</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>凡是需要按位或操作来组合的枚举都应该使用NS_OPTIONS定义。</p><p>在switch语句中，总是习惯加上default语句，然而，若是用枚举来定义状态机，则最好不要有default分支。这样增加了一种状态，编译器会发出警告提示需要增加新的处理。</p><h2 id="位掩码"><a href="#位掩码" class="headerlink" title="位掩码"></a>位掩码</h2><p>当用到位掩码时，使用 NS_OPTIONS 宏。</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_OPTIONS(NSUInteger, WRGAdCategory) &#123;</span><br><span class="line">WRGAdCategoryAutos      = 1 &lt;&lt; 0,</span><br><span class="line">WRGAdCategoryJobs       = 1 &lt;&lt; 1,</span><br><span class="line">WRGAdCategoryRealState  = 1 &lt;&lt; 2,</span><br><span class="line">WRGAdCategoryTechnology = 1 &lt;&lt; 3</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>在对象外部访问实例变量的时候，总是应该通过属性来访问。除了几种特殊情况，在对象内部时读取数据时，应该直接访问实例变量，而写入数据时，则应该通过属性来写。这么写的目的是：</p><ul><li>直接访问实例变量的速度比较快，编译器所生成的代码会直接访问保存对象实例变量的内存。</li><li>直接访问实例变量时，不会调用其”设置方法”，这就绕过了为相关属性所定义的”内存管理语意”。</li><li>直接访问实例变量，不会触发KVO通知。具体有没有影响需要看具体行为。</li><li>通过属性来访问有助于排查错误，可以增加断点来监控对象行为。</li></ul><p>在初始化方法和dealloc方法以及getter和setter中，应该总是使用实例变量来读写数据。</p><p>使用惰性初始化方法时，使用属性来访问。</p><p>私有属性应该声明在类实现文件的延展（匿名的类目）中。</p><p>支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@interface Counter : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, retain) NSNumber *count;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">- (NSNumber *)count &#123;</span><br><span class="line">return _count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setCount:(NSNumber *)newCount &#123;</span><br><span class="line">    [newCount retain];</span><br><span class="line">    [_count release];</span><br><span class="line">    // Make the new assignment.</span><br><span class="line">    _count = newCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- init &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _count = [[NSNumber alloc] initWithInteger:0];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- initWithCount:(NSNumber *)startingCount &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _count = [startingCount copy];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    [_count release];</span><br><span class="line">    [super dealloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在继承父类的时候，如果本类中没有相关属性，在 init 方法中使用点语法，则会寻找父类属性，而使用实例变量则不会，可以很好的控制本类中的属性，检查属性。</p><p>有关在初始化方法和 dealloc 方法中使用访问器方法的信息，参见<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6" target="_blank" rel="noopener">这里</a>。</p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>因为 nil 解析为 NO，所以没有必要在条件中与它进行比较。永远不要直接和 YES 进行比较，因为 YES 被定义为 1，而 BOOL 可以多达 8 位。</p><p>这使得整个文件有更多的一致性和更大的视觉清晰度。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!someObject) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (someObject == nil) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 BOOL 来说, 这有两种用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (isAwesome)</span><br><span class="line">if (![someObject boolValue])</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ([someObject boolValue] == NO)</span><br><span class="line">if (isAwesome == YES) // 永远别这么做</span><br></pre></td></tr></table></figure><p>如果一个 BOOL 属性名称是一个形容词，属性可以省略 “is” 前缀，但为 get 访问器指定一个惯用的名字，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (assign, getter=isEditable) BOOL editable;</span><br></pre></td></tr></table></figure><p>内容和例子来自 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE" target="_blank" rel="noopener">Cocoa 命名指南</a> 。</p><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p>单例对象应该使用线程安全的模式创建共享的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)sharedInstance &#123;</span><br><span class="line">static id sharedInstance = nil;</span><br><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">sharedInstance = [[self alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将会预防<a href="http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html" target="_blank" rel="noopener">有时可能产生的许多崩溃</a>。</p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>将 <em>import</em> 和其他的文件名之间加一个空格。如果有一个以上的 import 语句，就对这些语句进行<a href="http://ashfurrow.com/blog/structuring-modern-objective-c/" target="_blank" rel="noopener">分组</a>。每个分组的注释是可选的。<br>注：对于模块使用 <a href="http://clang.llvm.org/docs/Modules.html#using-modules" target="_blank" rel="noopener">@import</a> 语法。</p><p>除了子类化或是协议之外，最好使用 <strong>@class</strong> 这种方式，避免过多的头文件引入。在引入协议的时候，如果不是连当前类也引入的情况下，将协议单独声明出来再引入。</p><h2 id="Xcode-工程"><a href="#Xcode-工程" class="headerlink" title="Xcode 工程"></a>Xcode 工程</h2><p>为了避免文件杂乱，物理文件应该保持和 Xcode 项目文件同步。Xcode 创建的任何组（group）都必须在文件系统有相应的映射。为了更清晰，代码不仅应该按照类型进行分组，也可以根据功能进行分组。</p><p>如果可以的话，尽可能一直打开 target Build Settings 中 “Treat Warnings as Errors” 以及一些<a href="http://boredzo.org/blog/archives/2009-11-07/warnings" target="_blank" rel="noopener">额外的警告</a>。如果你需要忽略指定的警告,使用 <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas" target="_blank" rel="noopener">Clang 的编译特性</a> 。</p><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>1、在 <em>extension</em> 和 <em>implementation</em> 之间添加一行空格。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@interface MyClass ()</span><br><span class="line"></span><br><span class="line">// Properties - empty line above and below</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation MyClass</span><br><span class="line"></span><br><span class="line">// Body - empty line above and below</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>2、在 <em>@end</em>之后添加一空行</p><p>3、使用 <em>pragma mark</em>之后添加一行空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (CGSize)intrinsicContentSize &#123;</span><br><span class="line">return CGSizeMake(12, 12);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Private</span><br><span class="line"></span><br><span class="line">- (void)setup &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、操作数学运算符时在运算符俩侧添加空格。一元运算符不用。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSInteger index = rand() % 50 + 25;</span><br><span class="line">index++;</span><br><span class="line">index += 1;</span><br><span class="line">index--;</span><br></pre></td></tr></table></figure><p>5、在进行逻辑判断时，在 <em>if</em> 之后添加一个空格，并在 <em>{</em> 之前添加一个空格。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (alpha + beta &lt;= 0) &amp;&amp; (kappa + phi &gt; 0) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、对于多参数的方法，除非方法签名大于或等于3行，否则不要换行。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// blocks are easily readable</span><br><span class="line">[UIView animateWithDuration:1.0 animations:^&#123;</span><br><span class="line">   // something</span><br><span class="line">&#125; completion:^(BOOL finished) &#123;</span><br><span class="line">   // something</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// colon-aligning makes the block indentation wacky and hard to read</span><br><span class="line">[UIView animateWithDuration:1.0</span><br><span class="line"> animations:^&#123;</span><br><span class="line">                 // something</span><br><span class="line">             &#125;</span><br><span class="line">             completion:^(BOOL finished) &#123;</span><br><span class="line">                 // something</span><br><span class="line">             &#125;];</span><br></pre></td></tr></table></figure><p>7、不要在对象类型前和 <em>protocol</em>之间添加空格。</p><p>推荐：</p><pre><code>@property (nonatomic, weak) id&lt;SGOAnalyticsDelegate&gt; analyticsDelegate;</code></pre><p>反对：</p><pre><code>@property (nonatomic, weak) id &lt;SGOAnalyticsDelegate&gt; analyticsDelegate;    </code></pre><h2 id="其他Objective-C-风格指南"><a href="#其他Objective-C-风格指南" class="headerlink" title="其他Objective-C 风格指南"></a>其他Objective-C 风格指南</h2><p>如果感觉不太符合口味，可以看看下面的风格指南：</p><ul><li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html" target="_blank" rel="noopener">Objective-C 编程语言</a></li><li><a href="https://developer.apple.com/legacy/library/documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html" target="_blank" rel="noopener">Cocoa 基本原理指南</a></li><li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" target="_blank" rel="noopener">Cocoa 编码指南</a></li><li><a href="https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html" target="_blank" rel="noopener">iOS 应用编程指南</a></li><li><a href="https://github.com/NYTimes/objective-c-style-guide" target="_blank" rel="noopener">纽约时报 移动团队 Objective-C 规范指南</a></li><li><a href="https://github.com/RobotsAndPencils/objective-c-style-guide" target="_blank" rel="noopener">Robots &amp; Pencils Objective-C Style Guide</a></li></ul><p>其他</p><ul><li><a href="https://github.com/raywenderlich/objective-c-style-guide" target="_blank" rel="noopener">raywenderlich.com</a></li><li><a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml" target="_blank" rel="noopener">Google</a></li><li><a href="https://github.com/github/objective-c-style-guide" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://trac.adium.im/wiki/CodingStyle" target="_blank" rel="noopener">Adium</a></li><li><a href="https://gist.github.com/soffes/812796" target="_blank" rel="noopener">Sam Soffes</a></li><li><a href="http://cocoadevcentral.com/articles/000082.php" target="_blank" rel="noopener">CocoaDevCentral</a>)</li><li><a href="http://www.cimgf.com/zds-code-style-guide/" target="_blank" rel="noopener">Marcus Zarra</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;点语法&quot;&gt;&lt;a href=&quot;#点语法&quot; class=&quot;headerlink&quot; title=&quot;点语法&quot;&gt;&lt;/a&gt;点语法&lt;/h2&gt;&lt;p&gt;应该 &lt;strong&gt;始终&lt;/strong&gt; 使用点语法来访问或者修改属性，访问其他实例时首选括号（对比下面的属性）。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.idechao.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.idechao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>快速开始</title>
    <link href="http://www.idechao.com/2019/05/27/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.idechao.com/2019/05/27/快速开始/</id>
    <published>2019-05-27T09:42:42.684Z</published>
    <updated>2019-12-28T12:17:39.576Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="多个category语法"><a href="#多个category语法" class="headerlink" title="多个category语法"></a>多个category语法</h2><h3 id="子分类"><a href="#子分类" class="headerlink" title="子分类"></a>子分类</h3><p>下面的分类会将该分章放到 Java/Servlet这个分类下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Java</span><br><span class="line">  - Servlet</span><br></pre></td></tr></table></figure><p>同样的作用我们也可以这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: [Java, Servlet]</span><br></pre></td></tr></table></figure><p>上面两种方法最终效果一样，都是将文章放在了一个子分类的目录下，效果如图。</p><p> <img src="/images/quickstart-category.png" alt></p><h3 id="多个分类"><a href="#多个分类" class="headerlink" title="多个分类"></a>多个分类</h3><p>如果我们的要求是将文章同时分到多个不同的分类中呢，我们应该这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [Java]</span><br><span class="line">  - [Servlet]</span><br></pre></td></tr></table></figure><p>这样，就可以将上面的文章分类到 <code>Java</code> 和 <code>Servlet</code> 这两个不同的目录中了。</p><p>扩展一下，如果我们将其分类到 <code>Java/Servlet</code> 和 <code>Programming</code> 两个不同的目录下，我们应该如下写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [Java, Servlet]</span><br><span class="line">  - [Programming]</span><br></pre></td></tr></table></figure><h2 id="hexo引用图片"><a href="#hexo引用图片" class="headerlink" title="hexo引用图片"></a>hexo引用图片</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><h2 id="新建菜单menu存放归档文章"><a href="#新建菜单menu存放归档文章" class="headerlink" title="新建菜单menu存放归档文章"></a>新建菜单menu存放归档文章</h2><h3 id="如何新建文件到自定义目录menu下"><a href="#如何新建文件到自定义目录menu下" class="headerlink" title="如何新建文件到自定义目录menu下"></a>如何新建文件到自定义目录menu下</h3><p>相关链接：<a href="https://www.cnblogs.com/codebook/p/10312965.html" target="_blank" rel="noopener">https://www.cnblogs.com/codebook/p/10312965.html</a></p><p>新建的menu，里面设置路径的时候，要以category的方式来处理，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  Books: /categories/books/ || book # 这里是新增加的菜单</span><br><span class="line">  Movies: /movies/ || film</span><br><span class="line">  archives: /archives/ || archive</span><br></pre></td></tr></table></figure><p>新建的文件就可以直接放到books文件夹下，这样就应该直接展示出来了。</p><blockquote><p>这里网上有描述说是需要加上 <code>categories: books</code> 或者 <code>type: books</code>，不过我直接放到目录下，没有设置是没问题的，所以我这里就先不设置了，如果不展示可以尝试设置一下</p></blockquote><h3 id="隐藏自定义菜单menu的评论"><a href="#隐藏自定义菜单menu的评论" class="headerlink" title="隐藏自定义菜单menu的评论"></a>隐藏自定义菜单menu的评论</h3><p>默认的新建菜单，下面都带有评论，可以直接关闭。</p><p>打开自定义menu下的<code>index.md</code>文件，增加隐藏评论的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comments: false</span><br></pre></td></tr></table></figure><h2 id="category和tag理解"><a href="#category和tag理解" class="headerlink" title="category和tag理解"></a>category和tag理解</h2><p>拿超市的货品来作例子: </p><ul><li>Category 就是不同货架</li><li>Label 好比是贴在商品上的描述信息标签</li><li>Tag 则可以是临时添加的标记，比如「废弃」、「价格过期」</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
