<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>idechao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.idechao.com/"/>
  <updated>2019-12-28T12:11:02.540Z</updated>
  <id>http://www.idechao.com/</id>
  
  <author>
    <name>idechao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小狗钱钱</title>
    <link href="http://www.idechao.com/2019/12/27/books/%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1/"/>
    <id>http://www.idechao.com/2019/12/27/books/小狗钱钱/</id>
    <published>2019-12-27T14:47:46.000Z</published>
    <updated>2019-12-28T12:11:02.540Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;小狗钱钱是一本理财类的书，讲的主人公是个小孩子，在生活中，陷入财务危机，这个说的有点严重，应该说是缺钱了。然后收留了一直小狗，取名钱钱，小狗钱钱会说话，然后教会了主人公理财的方法。逐渐的，主人公的钱袋子就逐渐丰厚起来。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对于感想，写下总结内容。想到哪写到哪，没有一定的顺序。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;需要把资金进行管理。50%放入生蛋的”鹅”中，20%和20%放入梦想储蓄罐，剩余10%，当做自由资金。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;炒股是个正确的选择，每次收益，对收益部分做部分调整。大部分拿到另个一个账户，用户短线处理，大胆，果断，不犹豫，不纠结。再拿出一小部分，放到投入到基金中。其实我不是很喜欢基金，但是为了分散一部分风险，还是持续增加一下。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;要坚持写成功笔记。这是一个很重要的习惯。我现在就是习惯写博客，包括技术博客，股票投资记录，读书笔记等。而且要习惯把日常的东西记录下来，没准儿偶尔飘过的想法也会产生很大的作用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;要勇于尝试。小女孩敢在学校做演讲，没准现在的我在那么多人面前都不会那么从容淡定。包括现在在学的新技术，在开始的时候一个脑袋两个大，多练习之后，也会逐渐找到自信，熟能生巧，讲究的就是量变到质变的一个过程。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;持续学习股票知识。虽然在投资股票，但是现在并没有一套自己的理论，大多数在抄作业。虽然这也能获取一部分利润，但是在自己掌握的情况下，可能会产生更好的收益。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;72小时原则。想好了一件事情之后，要在72小时内完成，否则这件事情，有很大的概率不会去做了。比如想写个博客，然后想了想去玩了把游戏，推来推去的，这篇幅博客基本就写不成了。举个我的实际例子，想到出去旅行，兴致勃勃，但是没能及时买票做攻略，到后来就不了了之了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最好不要使用信用卡。我现在也很少使用信用卡，基本都解绑了，只留着晚上打车的的费用使用信用卡，或者大额的情况下，因为信用卡的权益部分还是不错的，但是每个月结束，都会去查看账单，去对一下。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;理财真的很重要，收入越高的人，消费也会跟着升级，没有达到一定程度，也是会资金紧张的。我有个朋友，年入也是百万的，也经常跟别人借钱，当然，他也是有能力还上去的。这里只是说明一些，理财应该在普遍的环境中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;小狗钱钱是一本理财类的书，讲的主人公是个小孩子，在生活中，陷入财务危机，这个说的有点严重，应该说是缺钱了。然后收留了一直小狗，取名钱钱，小狗钱钱会说话，然后教会了主人公理财的方法。逐渐的，主人公的钱袋子就逐渐丰厚起来。&lt;/p&gt;
      
    
    </summary>
    
      <category term="books" scheme="http://www.idechao.com/categories/books/"/>
    
    
      <category term="理财书籍" scheme="http://www.idechao.com/tags/%E7%90%86%E8%B4%A2%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>VSCode使用</title>
    <link href="http://www.idechao.com/2019/12/19/tools/VSCode%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.idechao.com/2019/12/19/tools/VSCode使用/</id>
    <published>2019-12-19T12:45:42.000Z</published>
    <updated>2019-12-19T15:38:42.499Z</updated>
    
    <content type="html"><![CDATA[<p>vscode是一个强大的编辑器。发现之后，就对其他编辑器没有什么想法了。</p><p>下面就记录下来常用的一些操作和配置的东西。</p><h1 id="vscode介绍"><a href="#vscode介绍" class="headerlink" title="vscode介绍"></a>vscode介绍</h1><p>知乎上有vscode的一篇介绍，<a href="https://zhuanlan.zhihu.com/p/35303567?spm=ata.13261165.0.0.77c31859FW62VV" target="_blank" rel="noopener">Visual Studio Code有哪些工程方面的亮点</a>，值得阅读。</p><h1 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h1><p>编辑器操作:</p><ul><li style="list-style: none"><input type="checkbox"> 隐藏左边目录栏 <code>command + b</code></li><li style="list-style: none"><input type="checkbox"> 显示隐藏终端 <code>control + `</code></li></ul><p>文件操作:</p><ul><li style="list-style: none"><input type="checkbox" checked> 注释，使用 <code>command + /</code> 可以把选中的行都注释掉 </li><li><p>[ ] 注释，使用 <code>shift + alt + a</code> 可以把选中的内容注释掉</p><p>  上面两个注释的区别就是，当选中的内容不是完整的两行的情况下，第一个会把两行都注释掉，第二个只会注释选中的内容</p></li><li><p>[ ] 上下移动行 <code>alt + up/down</code></p></li><li style="list-style: none"><input type="checkbox"> 复制当前行 <code>shift + alt + up/down</code></li><li style="list-style: none"><input type="checkbox"> 删除当前行 <code>command + shift + k</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vscode是一个强大的编辑器。发现之后，就对其他编辑器没有什么想法了。&lt;/p&gt;
&lt;p&gt;下面就记录下来常用的一些操作和配置的东西。&lt;/p&gt;
&lt;h1 id=&quot;vscode介绍&quot;&gt;&lt;a href=&quot;#vscode介绍&quot; class=&quot;headerlink&quot; title=&quot;vsc
      
    
    </summary>
    
      <category term="VSCode" scheme="http://www.idechao.com/categories/VSCode/"/>
    
    
      <category term="VSCode" scheme="http://www.idechao.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>股票投资实录</title>
    <link href="http://www.idechao.com/2019/12/12/%E8%82%A1%E7%A5%A8/%E8%82%A1%E7%A5%A8%E6%8A%95%E8%B5%84%E5%AE%9E%E5%BD%95/"/>
    <id>http://www.idechao.com/2019/12/12/股票/股票投资实录/</id>
    <published>2019-12-12T15:32:19.000Z</published>
    <updated>2020-01-02T14:10:50.708Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="912a7b3197962f6dcb2732aca1d371a44d1849b5686ff3ac8c5777313026e56c">a54a2cbf1c08c076e56153d9cabc95f928562e6200bd68ff4e9aa780f57a562cf748a81e24480d52b0b1d2761d45513d5bd912d20981b63be3dc6ca9cd5946064122c57f5a3f438c9db42dc7e49b251f6387f96eef45e4d3a671ecc12964049bf10e1dda12b2216678931fb6f7f0e333e31b4be056416c3438a64c9f561eaa8b6a1fbc2cbb47d5d6a5e385a9db884e800dc2e0ded1c1dcdf2d60f4c4a95451813d0abbce228d8cdf085cf1b31790d77af07432ca1348b22e75fdea68f83cf1fa1799248a980236340186be01a0c1aedd8e34dc5b0f706d695763b5c616c8de4fa53e929ab44be29d4a07000e410609b309a5041a730a2b02879b87728643303f81542e161f0d6f68252a115e8b08595dccbccc94f1749c11b246b863ebd9734083cb22b3d860f7010aedc0cac2f42bbc1cb81874b2990bbe6225ff0a85035e8688643376a14e8655c0920d1550352b5c2c8c9a4b44046a05d4ad1fce8301670eed5d4820bb6680e19bf9cd07cdc10e8bbff694fea16306470b32937b632036658c6f16ac786d11066cd637dadb69509a84bce02c043c8210e4dbe8e6b7d74c9d5718362aa4b67c4760793b8f791f69caf9d1e3b61a1391f24f467d657ecd32553440361fe056a08c99f0a276d1ba6cb197031a13425c9558115ea02558772ae2f94ee1d45c23e4e677e245fc1a3d90947e9f99110f82eef804ba05af8c06fde1cd07cd169460bb252bd9ce057d41c1247e21923aadef1350955aee9f980be59bd0055cd587ac3c53b1804137d6c56816c482556ff51d6a408d985b53d3ed689c6bdcf46932c201101650869b08a80bef9bc2459aa7b76c706461e7ff77b5677f9c4263f59d39e176f2300414c75cbc18c5583a19078e45171e45c40edbb0029f84b357fcb9754e14b5530bc569a7eb27318269d72dc1143b1a4388bbed0856a8208acfda6ed901368b2e62f330cb37f72761446b764b7a7a9986d5425f1aa77fad7c17aa408ef599a2cbaaed08cb08973abed37caf856f4aca84c9e092bcddfee8bfdb3d54ccf9e0fd1e7306a103515bbe181b63021d20c9f458183d4092e1e244c41a0eacf3e0f6cc90976e0a4e5f1b93f0848189ba25e47764108ef025103f95ad497eff6564e2e161ad3cd0c264ff4295472c56cc68025c0197f150b869f7d5c86dd2c6294033b373c40203f85c06a02c6ba94265bfc62a9752a66a990510674020360dca352af90ed3adfffc39d45e24fda992ecdd18bdff043ed457aae46a265ab42d149e7da361b097107150880304cc0f99adfe873355ec82117cc500cf03dc6761492534b7e668ab9e458998bff7de305a013596e2476e8c05563fccba087ec51a5a35f904861ba6a752cdc11843138e063bbd6edd827378224d1f85f63727b2977896d771f1da25bb2df642f3d0f84ba6a7840e9a132ad7a136242495d24a9f3d422e39cf652ed19df233e7579144d7adf7ce911597c6bf63b2d928fe7e4c4c0758add3a57c105fde252ed8ae899b8f3acde073d30756fa098fdcfd6d4fa440b82ebf4004bb696803ecda745ac83ea7be4be23006e4634436faf555d5b1a26c2493d390c65ab6863cb663a98bc0fae5d4fd8d39c8feef0b76f3f992c3942ed31b601f92a9de7bb0686fdf024cf22a25cb43e169b692d4feb88972b9514131900a40e00d03eb91b8ddc1a76efff76bda1e22898dcd10d45a0c6bf570f1e9b3ed89a2eb4745fb5979b25e65e4b632cd71dafc6149831fa08abc16077fd99be1581625f036f5b6a1813ea196e8cab1251585c2f4a74121928a904247ea7d899e9625c84d41c49c2c17a3906f35d7fc7693b019232e8e5412a077a0cb9a4f8d3535886f53280b34b29303c1d0de6b0666baa590fcecf1ec394604749003eeffa97fcb5326ea7db05d45538f7da2a787bce67e40e818f99faf48a139cdd70b420d9e999a74a5d2a28a60864ca77db2fa4cb478dcd1e19f3e7a821179c0e4d47e43b75434f2e44aaa7ff1a7c8e9777b18e7f81631eb36debb6d8171591746ecf9b01883886f04e9aa7a0e8b1b5d37586bf6e4c7365e36ae18b9764c86b354de225790a4f028f8618ee7bb959e50caa8ea6507f40bfdb528f5f051dffce205f2ce3804d04ccb2ea53093a30cf1c7982538031f9e042b8b61db9ab88661d1061cc3af82be5b3b0f07465a6ade2e8db22b97f611031cb23facf44d9d93d18090014f8a5763c6731c116f2e8102f2bfd24c5d1a4ebdab74fca12a773ca7a949b239d66271a73232bb56793b6107e7b5629bc2dbe4f920fb5169127d0c14333d2b977a22e8a8958d4ac658f66552cc2a70350cfdc8c038b5be0839d5dd5c3588ca55006098f25ded85c665775d05c69547eb8a8d651daf467df695942022e875b78c3230ea5252a3460d9db6ad77e278a36ebad3f66fd899aae0eeef44a58c6665e28119f32b92f53a5f59802c8c8cd88b885d06a81a50957a313c4b96dcd2a7fa6a8dd37cc46ea36e1b84b538a2838153750dce27a9dc7748ab2823c521374ca8109616577679235ce561cc0be84414cb0abc59225fb1fb658cb203587a758439c0e49d5fe6c39dac48ab76d28ac825a4527b981c08aa6e3257ed735dd7011a09cf9ca09331e64d5764c71cd5477cce44fc15369a0e8b8e2f63f784bc5f7479bda8defd229e32dee19d10a8665ef01f2cc5955d70d2e9a0657acb3cf195f0e5991cc49fc27f1979d6bdfb14adc9760f6ab22a9a82ba84ad6cda998823016755c9640e34055e5807ee154472587125e73d0c0f7ac302d5f2fd3261a7c1276dffdddfbb52415791eb3fdc75f47e679155c66da8fd18f9e23d405aa6e8871b7b58269d6f11ecc683b54f3c19cac22d9cf7021ebb8e24af3d496510924895f806bec407d2900ce8106cc8ae11ce81829839dfe2c93a23b632c6a7fa039eaf573648835f9f9b88de3759e10a0cae9e51d3d0873237304b5e4812eb2436aa979b49098eb943d06f22c8a8e41a0cd4cb872a6ffce6e49ec6432e88fc0b2be4b6c770a912f97234d424a0f75a0051521076ba38a4cf283a5d0800e23662bc331883b264e225cfa1951406dd99f65b0a8af5d81de3ce8166637d1a5382551e68086d537c9a8f58adbeb3e9c44009d44e5d527d27cd30cf65cabd5beead89ebbe8fdd23eeda7711516bfccb58668984c9a999f8dc3223e212ed8442ce63681545beef95e705096b14f320f4dd9a0a198eac9e0d736786e08846d43d01299be897b1f1319b812914f8d77bfe1ef0adffb36c6e6a52c428c68b9758acf2f0e88cc743442bde4b5f084f6c7e72a992019303dd801cf353d51bef3e07c53f6e8df4aeb0607eb836468b28b17ca7608f2946a5307dd7d95d285852dcd9e95a9bed6e238380efbaf7b78b99c6c54238621e2ae9e55fcac368fb47c9403697984b5090164633ead3cd33309aa5672bf6cabb5069559a6b80d546d7bda0985a9cb3bd7a991492e1b1011211afaf78d79ab876f49110b1be2cf595733e55ec1e067cc518308b98c379cdc9adc4638e02e0026884dfc6a4f24ab5c197218354051363ed421029e4c45f4ba0092943c49cc0ede1a055400f07a667c240b6eeaf4bd7b9ff15cbdf25a2706097d1dc9d82f83fc7432f21eb40db48bb56c8e88122c1fc2224272f62df2b6b2a981ddf706a4bb33b30be08bccb238f9a145594d4518a76aaa09fda3eeeda8ab918f6bc2d339ad7dfa5e7b9c4158ac546c49d077ddb7bb2d0cec510b940f1ecfe80c58ba6de8e931c6d4540acab400f252bb9b99d843b1b443e9e7de16bcb1f69b9e33d1623dfdf3ffb9cd0a3fdc85f6aabfa0560a893298a892c04f0956b4863bbca9ad6761cf870722eff552e90d4d34011a10a3ad61b2af0ab23ceb8b03817daccfbfdf3df3fd93721100d90bd676f7c2156c667089979833e52767a623fe06d6086871aa9c0f73ec17cfa203cbc0f59309d2aa9cd2274b3880d576126b0c12ea6917b53bfe5d5af2dcc6a3adcfd64d609dfbd2c83a247d9267af1c19def6311b7960252dbdfebacb3d65ca41818934cf657be559688c0baeca96dde33aaf4e303ddc5087303e4a0b315062e9b8a53d9e223ca8f6963636c543600cbf0bf8163dfd84dce5333e7c8dc53cf5855ce6856e2ce2ba84e9aba9107e906b8f441f7c17d537f337206fa0696bd8b0764eca4</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      股票投资实录
    
    </summary>
    
      <category term="投资理财" scheme="http://www.idechao.com/categories/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="股票" scheme="http://www.idechao.com/tags/%E8%82%A1%E7%A5%A8/"/>
    
  </entry>
  
  <entry>
    <title>css常见问题小记</title>
    <link href="http://www.idechao.com/2019/12/09/%E5%89%8D%E7%AB%AF/css%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.idechao.com/2019/12/09/前端/css常见问题小记/</id>
    <published>2019-12-09T06:31:07.000Z</published>
    <updated>2019-12-29T16:34:18.734Z</updated>
    
    <content type="html"><![CDATA[<p>css日常开始时，遇到的问题，通过搜索找到的答案，做下总结。</p><h1 id="less参考"><a href="#less参考" class="headerlink" title="less参考"></a>less参考</h1><p><a href="https://less.bootcss.com/" target="_blank" rel="noopener">less</a></p><h2 id="amp-符号解释"><a href="#amp-符号解释" class="headerlink" title="&amp;符号解释"></a>&amp;符号解释</h2><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.head&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  border: 1px solid gainsboro;</span><br><span class="line">  background-color: #000000;</span><br><span class="line"></span><br><span class="line">  .content&#123;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.body&#123;</span><br><span class="line">    background-color: #72cc26;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.head &#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  border: 1px solid gainsboro;</span><br><span class="line">  background-color: #000000;</span><br><span class="line">&#125;</span><br><span class="line">.head .content &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.head.body &#123;</span><br><span class="line">  background-color: #72cc26;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以看到在类前面添加了<code>&amp;</code>之后，编译之后的<code>css</code>变为且的关系，而没有使用<code>&amp;</code>的<code>css</code>是父子的关系。</p><blockquote><p>这里需要注意.a.b和.a .b之间的区别，.a.b 是且的关系意思就是2者必须都具备，而.a .b是上下级，父子关系:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--.a.b--&gt;</span><br><span class="line">&lt;div class=&quot;a b&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!--.a .b--&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="类选择器的方式"><a href="#类选择器的方式" class="headerlink" title="类选择器的方式"></a>类选择器的方式</h1><ol><li>后代选择器, E1 E2, 选择所有被E1包含的E2。中间用空格分隔。匹配那些由第一个元素作为祖先元素的所有第二个元素(后代元素) ,不需要相匹配元素之间要有严格的父子关系</li><li>p,h2,h1, 将同样的定义应用于多个选择符</li><li>子元素选择器, X&gt;Y, ,只会匹配那些作为第一个元素的直接后代(子元素)的第二元素</li><li>.a.b，就是2者必须都具备，<code>&lt;div class=&quot;a b&quot;&gt;&lt;/div&gt;</code></li></ol><h1 id="flex布局汇总"><a href="#flex布局汇总" class="headerlink" title="flex布局汇总"></a>flex布局汇总</h1><p>参考链接：<br>知乎： <a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25303493</a></p><p>阮一峰总结：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><h2 id="容器上的属性"><a href="#容器上的属性" class="headerlink" title="容器上的属性"></a>容器上的属性</h2><ul><li>flex-direction：决定主轴的方向(即项目的排列方向)，默认值：row，主轴为水平方向，起点在左端。</li><li>flex-wrap：决定容器内项目是否可换行</li><li>flex-flow：flex-direction 和 flex-wrap 的简写形式</li><li>justify-content：定义了项目在主轴的对齐方式。</li><li>align-items：定义了项目在交叉轴上的对齐方式</li><li>align-content：定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</li></ul><h2 id="item上的属性"><a href="#item上的属性" class="headerlink" title="item上的属性"></a>item上的属性</h2><ul><li>order：定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0</li><li>flex-basis：定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间；当主轴为水平方向的时候，当设置了 flex-basis，项目的宽度设置值会失效，flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</li><li>flex-grow：定义项目的放大比例</li><li>flex-shrink：定义了项目的缩小比例</li><li>flex：flex-grow, flex-shrink 和 flex-basis的简写。快捷键如下：<ul><li>flex: auto (1 1 auto) </li><li>flex: none (0 0 auto)</li><li>flex: 1； flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%</li><li>flex: 0；对应的三个值分别为 0 1 0%</li><li>flex: 0%; flex: 24px; 当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）</li></ul></li></ul><h1 id="文本一行，超出显示…"><a href="#文本一行，超出显示…" class="headerlink" title="文本一行，超出显示…"></a>文本一行，超出显示…</h1><p>效果如下图：</p><div style="display:flex;border:1px solid red;"><br>        <div style="text-overflow: ellipsis;            overflow: hidden;            white-space: nowrap;            display:block;"><br>        做 Web 开发的同学应该比较熟悉 Postman ，一个 HTTP API 测试工具。它是一个基于 Electron 开发的客户端软件，支持 OSX，Window 和 Linux。Postman 功能非常强大，支持 REST，SOAP 和 GraphQL 请求，可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等。总之，对开发 Web API 来说，Postman 是一个非常好的工具。<br>        </div><br></div><p>实例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- div元素 --&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    做 Web 开发的同学应该比较熟悉 Postman ，一个 HTTP API 测试工具。它是一个基于 Electron 开发的客户端软件，支持 OSX，Window 和 Linux。Postman 功能非常强大，支持 REST，SOAP 和 GraphQL 请求，可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等。总之，对开发 Web API 来说，Postman 是一个非常好的工具。</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- less语法如下 --&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line"></span><br><span class="line">    .content &#123;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        </span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>content</code>标签里的前三个是必须的。</p><p>虽然有时候测试的时候，hidden不写也生效了，但是规范一些，还是需要增加上。</p><p><code>display: block;</code>这个，最好也是增加上，在不生效的情况，应该增加这个属性。</p><h1 id="list文本在一行，超出不展示"><a href="#list文本在一行，超出不展示" class="headerlink" title="list文本在一行，超出不展示"></a>list文本在一行，超出不展示</h1><ul><li style="list-style: none"><input type="checkbox"> 设置高度固定</li><li style="list-style: none"><input type="checkbox"> 设置flex-wrap: wrap; 貌似无需设置overflow: hidden;</li></ul><h1 id="设置两个视图顶部对齐"><a href="#设置两个视图顶部对齐" class="headerlink" title="设置两个视图顶部对齐"></a>设置两个视图顶部对齐</h1><p>比如a需要设置顶部和b对齐，但是b的高度是自动撑开的，不知道本身的高度。</p><p>这时候就可以在外面再包一层，然后a和b都设置为absolute，这样顶部就可以对齐了。</p><h1 id="文本垂直居中"><a href="#文本垂直居中" class="headerlink" title="文本垂直居中"></a>文本垂直居中</h1><p>这个方法只能将单行文本置中。只需要简单地把 <code>line-height</code> 设置为那个对象的 height 值就可以使文本居中了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;content&quot;&gt; Content here&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#content &#123;</span><br><span class="line">height: 100px;</span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>适用于所有浏览器</li><li>无足够空间时不会被截断</li></ul><p>缺点：</p><ul><li>只对文本有效(块级元素无效)</li><li>多行时，断词比较糟糕</li></ul><p>这个方法在小元素上非常有用，例如使按钮文本或者单行文本居中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;css日常开始时，遇到的问题，通过搜索找到的答案，做下总结。&lt;/p&gt;
&lt;h1 id=&quot;less参考&quot;&gt;&lt;a href=&quot;#less参考&quot; class=&quot;headerlink&quot; title=&quot;less参考&quot;&gt;&lt;/a&gt;less参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="CSS" scheme="http://www.idechao.com/categories/CSS/"/>
    
    
      <category term="css日常开发" scheme="http://www.idechao.com/tags/css%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>富爸爸穷爸爸</title>
    <link href="http://www.idechao.com/2019/12/07/books/%E5%AF%8C%E7%88%B8%E7%88%B8%E7%A9%B7%E7%88%B8%E7%88%B8/"/>
    <id>http://www.idechao.com/2019/12/07/books/富爸爸穷爸爸/</id>
    <published>2019-12-07T15:28:46.000Z</published>
    <updated>2019-12-28T05:08:08.751Z</updated>
    
    <content type="html"><![CDATA[<p>看看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看看&lt;/p&gt;

      
    
    </summary>
    
      <category term="books" scheme="http://www.idechao.com/categories/books/"/>
    
    
      <category term="理财书籍" scheme="http://www.idechao.com/tags/%E7%90%86%E8%B4%A2%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>js学习笔记</title>
    <link href="http://www.idechao.com/2019/12/05/%E5%89%8D%E7%AB%AF/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.idechao.com/2019/12/05/前端/js学习笔记/</id>
    <published>2019-12-05T12:42:05.000Z</published>
    <updated>2020-01-02T05:31:46.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>js基础可以参考：</p><ul><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">网道 / WangDoc.com</a></li><li><a href="https://zh.javascript.info/js" target="_blank" rel="noopener">javascript.info</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN-JavaScript</a></li></ul><p>ES6可以参考下面两个，内容相差不大：</p><ul><li><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="http://caibaojian.com/es6/" target="_blank" rel="noopener">ES6入门文档</a></li></ul><h1 id="promise-重点！"><a href="#promise-重点！" class="headerlink" title="promise 重点！"></a>promise 重点！</h1><p>一个简单promise示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// resolve结果</span><br><span class="line">let promise = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(() =&gt; resolve(&quot;done!&quot;), 1000);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">promise.then(</span><br><span class="line">    result =&gt; console.log(result), // 在 1 秒后输出“done!”</span><br><span class="line">    error =&gt; console.info(error) // 不会运行</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>reject的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(()=&gt;reject(new Error(&apos;time out!&apos;)), 1000);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">promise.then(</span><br><span class="line">    result =&gt; console.log(result), // 不会运行</span><br><span class="line">    error =&gt; console.info(error) // Error: time out!</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h1><h2 id="push-pop-shift-unshift"><a href="#push-pop-shift-unshift" class="headerlink" title="push/pop,shift/unshift"></a>push/pop,shift/unshift</h2><p><code>shift</code>，返回删除的第一个元素; <code>unshift</code>就是在头部增加多个元素。</p><p><span style="color:red; font-weight:bold">都会修改原数组</span>，想要获取第一个，可以直接使用<code>arr[0]</code>。</p><h2 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h2><p>1、 优先考虑使用ES6的语法<code>...</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr1 = [1,2,3]</span><br><span class="line">let arr2 = [...arr1]</span><br><span class="line">arr2[0] = 0</span><br><span class="line">console.log(arr1) // =&gt; [ 1, 2, 3 ]</span><br><span class="line">console.log(arr2) // =&gt; [ 0, 2, 3 ]</span><br></pre></td></tr></table></figure><p>2、 slice语法</p><p>无需传递参数，或者从0到数组的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr1 = [1,2,3]</span><br><span class="line">let  arr2 = arr1.slice()</span><br><span class="line"></span><br><span class="line">arr2[0] = 0</span><br><span class="line"></span><br><span class="line">console.log(arr1)// =&gt; [ 1, 2, 3 ]</span><br><span class="line">console.log(arr2)// =&gt; [ 0, 2, 3 ]</span><br></pre></td></tr></table></figure><p>3、 通过<code>Object.assign</code>方法复制:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr1 = [1,2,3]</span><br><span class="line">let arr2 = []</span><br><span class="line">Object.assign(arr2, arr1)</span><br><span class="line">arr2[0] = 0</span><br><span class="line">console.log(arr1) // =&gt; [ 1, 2, 3 ]</span><br><span class="line">console.log(arr2) // =&gt; [ 0, 2, 3 ]</span><br></pre></td></tr></table></figure><h2 id="splice-添加，删除和插入元素"><a href="#splice-添加，删除和插入元素" class="headerlink" title="splice 添加，删除和插入元素"></a>splice 添加，删除和插入元素</h2><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(index[, deleteCount, elem1, ..., elemN])</span><br></pre></td></tr></table></figure><p>从 <code>index</code> 开始：删除 <code>deleteCount</code> 元素并在当前位置插入 <code>elem1, ..., elemN</code>。最后返回已删除元素的数组。</p><p>可以将 <code>deleteCount</code> 设置为 0，<code>splice</code> 方法就能够插入元素而不用删除。</p><p>这里和其他数组方法中，负向索引是允许的。它们从数组末尾计算位置。</p><h2 id="slice-数组的子数组"><a href="#slice-数组的子数组" class="headerlink" title="slice 数组的子数组"></a>slice 数组的子数组</h2><p>它从所有元素的开始索引 <code>&quot;start&quot;</code> 复制到 <code>&quot;end&quot;</code> (不包括 <code>&quot;end&quot;</code>) 返回一个新的数组。<code>start</code> 和 <code>end</code> 都可以是负数，在这种情况下，从末尾计算索引。语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.slice(start, end)</span><br></pre></td></tr></table></figure><p>如果不传参数，则表示复制整个数组，</p><h2 id="concat-数组合并"><a href="#concat-数组合并" class="headerlink" title="concat 数组合并"></a>concat 数组合并</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.concat(arg1, arg2...)</span><br></pre></td></tr></table></figure><p>如下例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2];</span><br><span class="line"></span><br><span class="line">// merge arr with [3,4]</span><br><span class="line">alert( arr.concat([3, 4])); // 1,2,3,4</span><br><span class="line"></span><br><span class="line">// merge arr with [3,4] and [5,6]</span><br><span class="line">alert( arr.concat([3, 4], [5, 6])); // 1,2,3,4,5,6</span><br><span class="line"></span><br><span class="line">// merge arr with [3,4], then add values 5 and 6</span><br><span class="line">alert( arr.concat([3, 4], 5, 6)); // 1,2,3,4,5,6</span><br></pre></td></tr></table></figure><h2 id="indexOf-lastIndexOf-和-includes-查询数组"><a href="#indexOf-lastIndexOf-和-includes-查询数组" class="headerlink" title="indexOf/lastIndexOf 和 includes 查询数组"></a>indexOf/lastIndexOf 和 includes 查询数组</h2><ul><li><code>arr.indexOf(item, from)</code> 从索引 <code>from</code> 查询 <code>item</code>，如果找到返回索引，否则返回 -1。</li><li><code>arr.lastIndexOf(item, from)</code> — 和上面相同，只是从尾部开始查询。</li><li><code>arr.includes(item, from)</code> — 从索引 <code>from</code> 查询 <code>item</code>，如果找到则返回 <code>true</code>。</li></ul><h2 id="find-和-findIndex-条件查询"><a href="#find-和-findIndex-条件查询" class="headerlink" title="find 和 findIndex 条件查询"></a>find 和 findIndex 条件查询</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let result = arr.find(function(item, index, array) &#123;</span><br><span class="line">  // 如果查询到返回 true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果它返回<code>true</code>，则查询停止，返回 <code>item</code>。如果没有查询到，则返回 <code>undefined</code>。</p><p><strong>如果多个结果满足条件，则只返回第一个，或者说是查询到满足条件的结果之后，就不会继续查询了。</strong></p><p>如下例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let users = [</span><br><span class="line">  &#123;id: 1, name: &quot;John&quot;&#125;,</span><br><span class="line">  &#123;id: 2, name: &quot;Pete&quot;&#125;,</span><br><span class="line">  &#123;id: 3, name: &quot;Mary&quot;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">let user = users.find(item =&gt; item.id == 1);</span><br><span class="line"></span><br><span class="line">alert(user.name); // John</span><br></pre></td></tr></table></figure><h2 id="filter-条件查询"><a href="#filter-条件查询" class="headerlink" title="filter 条件查询"></a>filter 条件查询</h2><p>语法类似<code>find</code>，不过返回的是满足条件所有数据，是一个数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let users = [</span><br><span class="line">  &#123;id: 1, name: &quot;John&quot;&#125;,</span><br><span class="line">  &#123;id: 2, name: &quot;Pete&quot;&#125;,</span><br><span class="line">  &#123;id: 3, name: &quot;Mary&quot;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// 返回前两个用户的数组</span><br><span class="line">let someUsers = users.filter(item =&gt; item.id &lt; 3);</span><br><span class="line"></span><br><span class="line">alert(someUsers.length); // 2</span><br></pre></td></tr></table></figure><h2 id="map-数组转换"><a href="#map-数组转换" class="headerlink" title="map 数组转换"></a>map 数组转换</h2><p>它对数组中每个元素调用函数并返回符合结果的数组。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let result = arr.map(function(item, index, array) &#123;</span><br><span class="line">  // 返回新值而不是当前元素</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let lengths = [1, 2, 3].map(item =&gt; item &gt;= 2)</span><br><span class="line">console.log(lengths); // =&gt; [ false, true, true ]</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">let lengths = [&quot;Bilbo&quot;, &quot;Gandalf&quot;, &quot;Nazgul&quot;].map(item =&gt; item.length)</span><br><span class="line">console.log(lengths); // =&gt; [ 5, 7, 6 ]</span><br></pre></td></tr></table></figure><h2 id="sort-数组排序"><a href="#sort-数组排序" class="headerlink" title="sort 数组排序"></a>sort 数组排序</h2><p>注意箭头函数的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,4,8,5,7]</span><br><span class="line">console.log( arr.sort( (a,b)=&gt;a &gt; b) ) // =&gt; [ 1, 4, 5, 7, 8 ]</span><br></pre></td></tr></table></figure><h2 id="reverse-颠倒元素"><a href="#reverse-颠倒元素" class="headerlink" title="reverse 颠倒元素"></a>reverse 颠倒元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5];</span><br><span class="line">arr.reverse();</span><br><span class="line"></span><br><span class="line">console.log( arr ); // =&gt; [ 5, 4, 3, 2, 1 ]</span><br></pre></td></tr></table></figure><h2 id="split-join-数组字符串转换"><a href="#split-join-数组字符串转换" class="headerlink" title="split join 数组字符串转换"></a>split join 数组字符串转换</h2><p><code>split</code> 方法有一个可选的第二个数字参数 — 对数组长度的限制。如果提供了，那么额外的元素将被忽略</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let string = &apos;my,name,is,Tom&apos;</span><br><span class="line">let arr = string.split(&apos;,&apos;)</span><br><span class="line">console.log(arr) // =&gt; [ &apos;my&apos;, &apos;name&apos;, &apos;is&apos;, &apos;Tom&apos; ]</span><br></pre></td></tr></table></figure><p><strong>调用空的参数 <code>split(s)</code> 会将字符串分成一个字母数组。注意空字符与空参数的区别：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 参数为空字符</span><br><span class="line">let string = &apos;my,name,is,Tom&apos;</span><br><span class="line">let arr = string.split(&apos;&apos;)</span><br><span class="line">console.log(arr) // =&gt; [ &apos;m&apos;, &apos;y&apos;, &apos;,&apos;, &apos;n&apos;, &apos;a&apos;, &apos;m&apos;, &apos;e&apos;, &apos;,&apos;, &apos;i&apos;, &apos;s&apos;, &apos;,&apos;, &apos;T&apos;, &apos;o&apos;, &apos;m&apos; ]</span><br><span class="line"></span><br><span class="line">// 参数为空，整体返回，变为数组</span><br><span class="line">let string = &apos;my,name,is,Tom&apos;</span><br><span class="line">let arr = string.split()</span><br><span class="line">console.log(arr) // =&gt; [ &apos;my,name,is,Tom&apos; ]</span><br></pre></td></tr></table></figure><p><code>join</code> 为数组转为字符串，通过某个沾合符链接数组元素，注意元素为空的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let arr = [&apos;Bilbo&apos;, &apos;Gandalf&apos;, &apos;Nazgul&apos;];</span><br><span class="line">let str1 = arr.join(&quot;;&quot;);</span><br><span class="line">console.log( str1 ); // =&gt; Bilbo;Gandalf;Nazgul</span><br><span class="line"></span><br><span class="line">let str2 = arr.join(&quot;&quot;);</span><br><span class="line">console.log( str2 ); // =&gt; BilboGandalfNazgul</span><br><span class="line"></span><br><span class="line">let str3 = arr.join();</span><br><span class="line">console.log( str3 );  // =&gt; Bilbo,Gandalf,Nazgul</span><br></pre></td></tr></table></figure><h2 id="reduce-reduceRight-单值计算"><a href="#reduce-reduceRight-单值计算" class="headerlink" title="reduce/reduceRight 单值计算"></a>reduce/reduceRight 单值计算</h2><p>当我们需要遍历一个数组时 — 我们可以使用 <code>forEach</code>。</p><p>当我们需要迭代并返回每个元素的数据时 — 我们可以使用 `map。</p><p><code>arr.reduce</code> 和 <code>arr.reduceRight</code> 和上面差不多，但有点复杂。它们用于根据数组计算单个值。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let value = arr.reduce(function(previousValue, item, index, arr) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;, initial);</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">let result = arr.reduce((sum, current, index, arr) =&gt; &#123;</span><br><span class="line">    console.log(index)// =&gt; [0 ... 4]</span><br><span class="line">    return sum + current</span><br><span class="line">&#125;, 10);</span><br><span class="line"></span><br><span class="line">console.log(result); // =&gt; 25</span><br></pre></td></tr></table></figure><p>意思就是sum初始化为10，每次sum都再加上current的值。返回之后的sum值。</p><p>简写形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">let result = arr.reduce((sum, current, index, arr) =&gt; sum + current, 10);</span><br><span class="line"></span><br><span class="line">console.log(result); // =&gt; 25</span><br></pre></td></tr></table></figure><p><span style="color:red;font-weight:bold;">如果数组为空，那么在没有初始值的情况下调用 reduce 会导致错误。所以建议始终指定初始值。</span></p><h2 id="foreach遍历"><a href="#foreach遍历" class="headerlink" title="foreach遍历"></a>foreach遍历</h2><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(function(item, index, array) &#123;</span><br><span class="line">  // ... do something with item</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span style="color:red;font-weight:bold;">注意参数顺序是固定的，如果只有两个参数，那就是<code>item</code>和<code>index</code>。</span></p><h2 id="判断数组"><a href="#判断数组" class="headerlink" title="判断数组"></a>判断数组</h2><p>数组基于对象。不构成单独的语言类型。</p><p>所以 typeof 无法从对象中区分出数组来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof &#123;&#125;); // =&gt; object</span><br><span class="line">console.log(typeof []); // =&gt; object</span><br><span class="line"></span><br><span class="line">console.log(Array.isArray(&#123;&#125;)) // =&gt; false</span><br><span class="line">console.log(Array.isArray([])) // =&gt; true</span><br></pre></td></tr></table></figure><h2 id="总结，数组方法备忘录"><a href="#总结，数组方法备忘录" class="headerlink" title="总结，数组方法备忘录"></a>总结，数组方法备忘录</h2><p>数组方法备忘录：</p><h3 id="添加-删除元素："><a href="#添加-删除元素：" class="headerlink" title="添加/删除元素："></a>添加/删除元素：</h3><ul><li>push(…items) — 从结尾添加元素，</li><li>pop() — 从结尾提取元素，</li><li>shift() — 从开头提取元素，</li><li>unshift(…items) — 从开头添加元素，</li><li>splice(pos, deleteCount, …items) — 从 index 开始：删除 deleteCount 元素并在当前位置插入元素。</li><li>slice(start, end) — 它从所有元素的开始索引 “start” 复制到 “end” (不包括 “end”) 返回一个新的数组。</li><li>concat(…items) — 返回一个新数组：复制当前数组的所有成员并向其中添加 items。如果有任何items 是一个数组，那么就取其元素。</li></ul><h3 id="查询元素："><a href="#查询元素：" class="headerlink" title="查询元素："></a>查询元素：</h3><ul><li>indexOf/lastIndexOf(item, pos) — 从 pos 找到 item，则返回索引否则返回 -1。</li><li>includes(value) — 如果数组有 value，则返回 true，否则返回 false。</li><li>find/filter(func) — 通过函数过滤元素，返回 true 条件的符合 find 函数的第一个值或符合 filter 函数的全部值。</li><li>findIndex 和 find 类似，但返回索引而不是值。</li></ul><h3 id="转换数组："><a href="#转换数组：" class="headerlink" title="转换数组："></a>转换数组：</h3><ul><li>map(func) — 从每个元素调用 func 的结果创建一个新数组。</li><li>sort(func) — 将数组倒序排列，然后返回。</li><li>reverse() — 在原地颠倒数组，然后返回它。</li><li>split/join — 将字符串转换为数组并返回。</li><li>reduce(func, initial) — 通过为每个元素调用 func 计算数组上的单个值并在调用之间传递中间结果。</li></ul><h3 id="迭代元素："><a href="#迭代元素：" class="headerlink" title="迭代元素："></a>迭代元素：</h3><ul><li>forEach(func) — 为每个元素调用 func，不返回任何东西。</li></ul><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><p>– Array.isArray(arr) 检查 arr 是否是一个数组。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><span style="color:red;font-weight:bold;">请注意，sort，reverse 和 splice 方法修改数组本身。</span></p><p>这些方法是最常用的方法，它们覆盖 99％ 的用例。但是还有其他几个：</p><ul><li>arr.some(fn)/arr.every(fn) 检查数组。</li></ul><p>在类似于 map 的数组的每个元素上调用函数 fn。如果任何/所有结果为 true，则返回 true，否则返回 false。</p><ul><li><p>arr.fill(value, start, end) — 从 start 到 end 用 value 重复填充数组。</p></li><li><p>arr.copyWithin(target, start, end) — copies its elements from position start till position end into itself, at position target (overwrites existing).将其元素从 start 到 end 在 target 位置复制到 本身（覆盖现有）。</p></li></ul><p>有关完整列表，请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">手册</a>。</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="属性值的简写"><a href="#属性值的简写" class="headerlink" title="属性值的简写"></a>属性值的简写</h2><p>在有变量的情况下，对象可以直接简写为变量名，这样<code>key</code>就是变量的名字，值为实际变量的值，写法上可以直接省略<code>value</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let name = &apos;Tom&apos;</span><br><span class="line"></span><br><span class="line">let user = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age: 30,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(user.name)</span><br></pre></td></tr></table></figure><p>正常输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tom</span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性就是先声明一个变量，然后以<span style="color:red;font-weight:bold;">方括号</span>的形式来设置变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let name = &apos;随便起的name标识key&apos;</span><br><span class="line">let user = &#123;</span><br><span class="line">    [name]: &apos;Tom&apos;,</span><br><span class="line">&#125;</span><br><span class="line">console.log(user[name])</span><br></pre></td></tr></table></figure><p>正常输出输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tom</span><br></pre></td></tr></table></figure><p>设置和取值的时候都是以<span style="color:red;font-weight:bold;">方括号</span>的形式来设置的，如下直接使用点语法是获取不到的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(user.name)</span><br><span class="line"></span><br><span class="line">//输出</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p>这里在Symbol属性中有使用，可以参考下。</p><h2 id="方法参数，如-index"><a href="#方法参数，如-index" class="headerlink" title="方法参数，如{index}"></a>方法参数，如{index}</h2><p>如下参数，是个对象，调用的情况下，需要传递<code>key</code>为<code>index</code>才能生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function test(&#123;index&#125;) &#123;</span><br><span class="line">    console.log(index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(&#123;index:4&#125;) // =&gt; 4</span><br></pre></td></tr></table></figure><h1 id="可迭代对象-ITerables"><a href="#可迭代对象-ITerables" class="headerlink" title="可迭代对象 ITerables"></a>可迭代对象 ITerables</h1><p><code>Iterable</code> （可迭代对象）是数组的泛化。这个概念是说任何对象都可在 <code>for..of</code> 循环中使用。</p><p>数组本身就是可迭代的。但不仅仅是数组。字符串也可以迭代，很多其他内建对象也都可以迭代。</p><p>这个方法必须返回一个迭代器 —— 一个有 <code>next</code> 方法的对象。<code>next()</code> 返回结果的格式必须是 <code>{done: Boolean, value: any}</code>，当 <code>done=true</code> 时，表示迭代结束，否则 <code>value</code> 必须是一个未被迭代的新值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let range = &#123;</span><br><span class="line">    from: 1,</span><br><span class="line">    to: 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">range[Symbol.iterator] = function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        current: this.from,</span><br><span class="line">        last: this.to,</span><br><span class="line"></span><br><span class="line">        next() &#123;</span><br><span class="line">            if (this.current &lt;= this.last) &#123;</span><br><span class="line">                return &#123;done: false, value: this.current++&#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return &#123;done: true, value: this.current&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let num of range) &#123;</span><br><span class="line">    console.log(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可迭代对象和类数组对象"><a href="#可迭代对象和类数组对象" class="headerlink" title="可迭代对象和类数组对象"></a>可迭代对象和类数组对象</h2><ul><li><code>Iterables</code> 是应用于 <code>Symbol.iterator</code> 方法的对象，像上文所述。</li><li><code>Array-likes</code> 是有索引和 <code>length</code> 属性的对象，所以它们很像数组。</li></ul><p>可以使用 Array.from方法，将可迭代对象，或者类数组对象，转变为一个新的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let arrayLike = &#123;</span><br><span class="line">  0: &quot;Hello&quot;,</span><br><span class="line">  1: &quot;World&quot;,</span><br><span class="line">  length: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let arr = Array.from(arrayLike); // (*)</span><br><span class="line">alert(arr.pop()); // World（pop 方法生效）</span><br></pre></td></tr></table></figure><h1 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h1><p><code>Symbol</code> 值表示唯一的标识符。</p><p>可以使用 Symbol() 来创建这种类型的值。全局的使用<code>Symbol.for(key)</code>的方式，如果key存在，则使用，不存在，则创建。</p><p>举例：隐藏属性。</p><p>如原先可能有定义<code>id</code>字段，现在想新增一个唯一标识符，那不确定的情况下，不能直接设置<code>id</code>的值，会覆盖。这种情况下就使用<code>Symbol</code>唯一标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let user = &#123;</span><br><span class="line">    name: &apos;bob&apos;,</span><br><span class="line">&#125;</span><br><span class="line">let id = Symbol(&apos;id&apos;);</span><br><span class="line">user[id] = &apos;new id&apos;</span><br><span class="line"></span><br><span class="line">console.log(user[id])</span><br></pre></td></tr></table></figure><p>正常输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new id</span><br></pre></td></tr></table></figure><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown 最后是会被转换成 HTML 故使用 &lt;code&gt; 标签来解决</span><br><span class="line">| 在 HTML 中传输使用的 ACSII 码为 124，故使用 &amp;#124; 替换之</span><br></pre></td></tr></table></figure><p>js中的特定功能：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">语法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">逻辑与，AND（&amp;&amp;）</td><td style="text-align:center">expr1 &amp;&amp; expr2</td><td style="text-align:center">若 expr1 可转换为 true，则返回 expr2；否则，返回 expr1。</td></tr><tr><td style="text-align:center">逻辑或，OR（&#124; &#124;）</td><td style="text-align:center">expr1 &#124; &#124; expr2</td><td style="text-align:center">若 expr1 可转换为 true，则返回 expr1；否则，返回 expr2。</td></tr><tr><td style="text-align:center">逻辑非，NOT（!）</td><td style="text-align:center">!expr</td><td style="text-align:center">若 expr 可转换为 true，则返回 false；否则，返回 true。</td></tr></tbody></table><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>使用函数表达的时候，在赋值的情况下，右边的函数带括号和不带括号，使用起来是不一样的，如定义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sayHello() &#123;</span><br><span class="line">    console.log(&apos;hello~&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在赋值的时候，第一种直接使用<code>sayHello</code>，不带括号，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let hello = sayHello</span><br><span class="line">hello() // =&gt; hello</span><br><span class="line">hello // =&gt; 没有效果</span><br></pre></td></tr></table></figure><p>表示<code>sayHello</code>复制到了变量<code>hello</code>。</p><p>第二种，带着括号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let hello2 = sayHello()</span><br><span class="line">hello() // =&gt; error</span><br><span class="line">hello // =&gt; hello~</span><br></pre></td></tr></table></figure><p>表示将调用结果写进<code>hello2</code>，而不是函数本身。</p><p>在直接定义的情况，也就是变量后面直接跟着函数的情况下，是以上面第一种情况一样的，使用的时候需要带着括号，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let hello3 = function () &#123;</span><br><span class="line">    console.log(&apos;hi&apos;)</span><br><span class="line">&#125;</span><br><span class="line">hello3()</span><br></pre></td></tr></table></figure><h2 id="命名函数表达式（NFE）"><a href="#命名函数表达式（NFE）" class="headerlink" title="命名函数表达式（NFE）"></a>命名函数表达式（NFE）</h2><h1 id="方法和函数的区别"><a href="#方法和函数的区别" class="headerlink" title="方法和函数的区别"></a>方法和函数的区别</h1><ul><li>函数（function） 函数是一段代码，需要通过名字来进行调用。它能将一些数据（函数的参数）传递进去进行处理，然后返回一些数据（函数的返回值），也可以不返回数据。 </li><li>方法（method）是通过对象调用的javascript函数。也就是说，方法也是函数，只是比较特殊的函数。  </li><li>当将函数和对象和写在一起时，函数（function）就变成了方法（method）。 </li></ul><h1 id="rest-spread操作符-…"><a href="#rest-spread操作符-…" class="headerlink" title="rest,spread操作符 …"></a>rest,spread操作符 …</h1><p>方法入参可以传递任意参数，使用<code>...</code>的形式，放到最后。其中，<code>...</code>最终存储的为数组形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sumAll(...args) &#123;</span><br><span class="line">    let sum = 0</span><br><span class="line"></span><br><span class="line">    for (let arg of args) sum += arg</span><br><span class="line"></span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sumAll(1,2,3,4,5))</span><br></pre></td></tr></table></figure><p>相反的，比如<code>Math.max()</code>函数，支持不限个参数，但是不能是数组，这种情况可能就会用到这个spread操作符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [3, 5, 1];</span><br><span class="line"></span><br><span class="line">console.log( Math.max(...arr) ); // 5（Spread 操作符把数组转为参数列表）</span><br></pre></td></tr></table></figure><p><span style="color:red;font-weight:bold;"><code>...</code>出现的情况下，不是<code>Rest</code>参数，就是<code>Spread</code>操作符。</span></p><blockquote><p>扩展，函数的上下文会提供一个非常特殊的类数组对象 <code>arguments</code>，所有的参数被按序放置。<code>arguments</code>是一个类数组对象。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function showName() &#123;</span><br><span class="line">    console.log( arguments.length );</span><br><span class="line">    console.log( arguments[0] );</span><br><span class="line">    console.log( arguments[1] );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 依次输出提示：2，Julius，Caesar</span><br><span class="line">showName(&quot;Julius&quot;, &quot;Caesar&quot;);</span><br><span class="line"></span><br><span class="line">// 依次输出提示：1，Ilya，undefined（不存在第二个参数）</span><br><span class="line">showName(&quot;Ilya&quot;);</span><br></pre></td></tr></table></figure><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="数组遍历，写法问题导致失败"><a href="#数组遍历，写法问题导致失败" class="headerlink" title="数组遍历，写法问题导致失败"></a>数组遍历，写法问题导致失败</h2><p>如下例子，遍历数组，实际执行的时候回报错：<code>model is not defined</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const list = [&#123;a:[]&#125;]</span><br><span class="line">const model = list[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(model.a || []).forEach(function (item) &#123;</span><br><span class="line">    console.log(&apos;====&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const list = [&#123;a:[]&#125;]</span><br><span class="line">const model = list[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;(model.a || []).forEach(function (item) &#123;</span><br><span class="line">    console.log(&apos;====&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前面多了一个分号。</p><p>原因是括号的情况下，直接编译成和上面连续的代码了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const list = [&#123;a:[]&#125;]</span><br><span class="line">const model = list[0](model.a || []).forEach(function (item) &#123;</span><br><span class="line">    console.log(&apos;====&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;p&gt;js基础可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wangdoc.com/javascript
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.idechao.com/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="http://www.idechao.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C规范指南</title>
    <link href="http://www.idechao.com/2019/05/27/iOS/Objective-C%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/"/>
    <id>http://www.idechao.com/2019/05/27/iOS/Objective-C规范指南/</id>
    <published>2019-05-27T14:18:32.000Z</published>
    <updated>2019-12-06T12:12:21.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点语法"><a href="#点语法" class="headerlink" title="点语法"></a>点语法</h2><p>应该 <strong>始终</strong> 使用点语法来访问或者修改属性，访问其他实例时首选括号（对比下面的属性）。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">view.backgroundColor = [UIColor orangeColor];</span><br><span class="line"> </span><br><span class="line">[UIApplication sharedApplication].delegate;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[view setBackgroundColor:[UIColor orangeColor]];</span><br><span class="line"></span><br><span class="line">UIApplication.sharedApplication.delegate;</span><br></pre></td></tr></table></figure><h2 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h2><ul><li>一个缩进使用 4 个空格，永远不要使用制表符（tab）缩进。请确保在 Xcode 中设置了此偏好。</li><li>方法的大括号和其他的大括号（if/else/switch/while 等等）始终和声明在同一行开始，在新的一行结束。</li></ul><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (user.isHappy) &#123;</span><br><span class="line">// Do something</span><br><span class="line">&#125;</span><br><span class="line">else if (user.isOld) &#123;</span><br><span class="line">// Do something</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Do something else</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法之间应该正好空一行，这有助于视觉清晰度和代码组织性。在方法中的功能块之间应该使用空白分开，但往往可能应该创建一个新的方法。</li><li>@synthesize 和 @dynamic 在实现中每个都应该占一个新行。</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>条件判断主体部分应该始终使用大括号括住来防止出错，即使它可以不用大括号（例如它只需要一行）。这些错误包括添加第二行（代码）并希望它是 if 语句的一部分时。还有另外一种<a href="http://programmers.stackexchange.com/questions/16528/single-statement-if-block-braces-or-no/16530#16530" target="_blank" rel="noopener">更危险的</a>，当 if 语句里面的一行被注释掉，下一行就会在不经意间成为了这个 if 语句的一部分。此外，这种风格也更符合所有其他的条件判断，因此也更容易检查。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!error) &#123;</span><br><span class="line">return success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!error)</span><br><span class="line">return success;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!error) return success;</span><br></pre></td></tr></table></figure><p>##三目运算符<br>三目运算符(? :) ，只有当它可以增加代码清晰度或整洁时才使用。单一的条件都应该优先考虑使用。多条件时通常使用 if 语句会更易懂，或者重构为实例变量。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = a &gt; b ? x : y;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = a &gt; b ? x = c &gt; d ? c : d : y;</span><br></pre></td></tr></table></figure><p>##错误处理<br>当引用一个返回错误参数（error parameter）的方法时，应该针对返回值，而非错误变量。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSError *error;</span><br><span class="line">if (![self trySomethingWithError:&amp;error]) &#123;</span><br><span class="line">// 处理错误</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSError *error;</span><br><span class="line">[self trySomethingWithError:&amp;error];</span><br><span class="line">if (error) &#123;</span><br><span class="line">// 处理错误</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些苹果的 API 在成功的情况下会写一些垃圾值给错误参数（如果非空），所以针对错误变量可能会造成虚假结果（以及接下来的崩溃）。</p><p>##方法<br>在方法签名中，在 -/+ 符号后应该有一个空格。方法片段之间也应该有一个空格。构造方法使  <em><a href="http://clang.llvm.org/docs/LanguageExtensions.html#related-result-types" target="_blank" rel="noopener">instancetype </a></em> 作为返回类型来代替 <em>id</em> 。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)setExampleText:(NSString *)text image:(UIImage *)image;</span><br></pre></td></tr></table></figure><p>对于私有方法，应该加前缀用以区分。具体使用可以自行决定，建议使用p加下划线的方式：<em>p_</em> , p表示”private”，不建议使用单个下划线的方式，这种方式是预留给苹果使用的。</p><p>##变量<br>变量名应该尽可能命名为描述性的。除了 for() 循环外，其他情况都应该避免使用单字母的变量名。 星号表示指针属性变量，例如：<code>NSString *text</code>不要写成<code>NSString* text</code>或者<code>NSString * text</code>，常量除外。 </p><p>尽量定义属性来代替直接使用实例变量,同时声明内存的管理方式。如果一个属性只在 <em>init</em> 方法里设置了一次，声明为 <em>readonly</em> 。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection: NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *headline;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection : NSObject &#123;</span><br><span class="line">NSString *headline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface WRGSection: NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic) NSString *headline;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>###变量限定符<br>当涉及到<a href="https://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226-CH1-SW4" target="_blank" rel="noopener">在 ARC 中被引入</a>变量限定符时， 限定符 (<strong>strong, </strong>weak, <strong>unsafe_unretained, </strong>autoreleasing) 应该位于最前面，如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__weak NSString *text</span><br></pre></td></tr></table></figure><p>##命名<br>尽可能遵守苹果的命名约定，尤其那些涉及到<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" target="_blank" rel="noopener">内存管理规则</a>，（<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" target="_blank" rel="noopener">NARC</a>）的。</p><p>长的和描述性的方法名和变量名都不错。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton *settingsButton;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton *setBut;</span><br></pre></td></tr></table></figure><p>类名和常量应该始终使用三个字母的前缀（例如 WRG）（常亮也可使用字母k开头），但 Core Data 实体名称可以省略。为了代码清晰，常量应该使用相关类的名字作为前缀并使用驼峰命名法。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval WRGArticleViewControllerNavigationFadeAnimationDuration = 0.3;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static const NSTimeInterval fadetime = 1.7;</span><br></pre></td></tr></table></figure><p>属性和局部变量应该使用驼峰命名法并且首字母小写。</p><p>为了保持一致，实例变量应该使用驼峰命名法命名，并且首字母小写，以下划线为前缀。这与 LLVM 自动合成的实例变量相一致。 如果 <strong>LLVM</strong> 可以自动合成变量，那就让它自动合成。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@synthesize descriptiveVariableName = _descriptiveVariableName;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id varnm;</span><br></pre></td></tr></table></figure><p>##注释<br>当需要的时候，注释应该被用来解释 为什么 特定代码做了某些事情。所使用的任何注释必须保持最新否则就删除掉。</p><p>通常应该避免一大块注释，代码就应该尽量作为自身的文档，只需要隔几行写几句说明。这并不适用于那些用来生成文档的注释。</p><p>##init 和 dealloc<br><em>dealloc</em> 方法应该放在实现文件的最上面，并且刚好在 <em>@synthesize</em> 和 <em>@dynamic</em> 语句的后面。在任何类中，<em>init</em> 都应该直接放在 <em>dealloc</em> 方法的下面。</p><p>init 方法的结构应该像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)init &#123;</span><br><span class="line">self = [super init]; // 或者调用指定的初始化方法</span><br><span class="line">if (self) &#123;</span><br><span class="line">    // Custom initialization</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##字面量<br>每当创建 <em>NSString</em>， <em>NSDictionary</em>， <em>NSArray</em>，和 <em>NSNumber</em> 类的不可变实例时，都应该使用字面量。要注意 <em>nil</em> 值不能传给 <em>NSArray</em> 和 <em>NSDictionary</em> 字面量，这样做会导致崩溃。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = @[@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;];</span><br><span class="line">NSDictionary *productManagers = @&#123;@&quot;iPhone&quot; : @&quot;Kate&quot;, @&quot;iPad&quot; : @&quot;Kamal&quot;, @&quot;Mobile Web&quot; : @&quot;Bill&quot;&#125;;</span><br><span class="line">NSNumber *shouldUseLiterals = @YES;</span><br><span class="line">NSNumber *buildingZIPCode = @10018;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = [NSArray arrayWithObjects:@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;, nil];</span><br><span class="line">NSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @&quot;Kate&quot;, @&quot;iPhone&quot;, @&quot;Kamal&quot;, @&quot;iPad&quot;, @&quot;Bill&quot;, @&quot;Mobile Web&quot;, nil];</span><br><span class="line">NSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];</span><br><span class="line">NSNumber *buildingZIPCode = [NSNumber numberWithInteger:10018];</span><br></pre></td></tr></table></figure><p>##CGRect 函数<br>当访问一个 CGRect 的 x， y， width， height 时，应该使用<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGGeometry/index.html" target="_blank" rel="noopener">CGGeometry 函数</a>代替直接访问结构体成员。苹果的 CGGeometry 参考中说到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. </span><br><span class="line">For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. </span><br><span class="line">Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics.</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame;</span><br><span class="line"></span><br><span class="line">CGFloat x = CGRectGetMinX(frame);</span><br><span class="line">CGFloat y = CGRectGetMinY(frame);</span><br><span class="line">CGFloat width = CGRectGetWidth(frame);</span><br><span class="line">CGFloat height = CGRectGetHeight(frame);</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.view.frame;</span><br><span class="line"></span><br><span class="line">CGFloat x = frame.origin.x;</span><br><span class="line">CGFloat y = frame.origin.y;</span><br><span class="line">CGFloat width = frame.size.width;</span><br><span class="line">CGFloat height = frame.size.height;</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量首选内联字符串字面量或数字，因为常量可以轻易重用并且可以快速改变而不需要查找和替换。常量应该声明为 static 常量而不是 #define ，除非非常明确地要当做宏来使用。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static NSString * const WRGAboutViewControllerAuthorName = @&quot;Warning&quot;;</span><br><span class="line"></span><br><span class="line">static const CGFloat WRGImageThumbnailHeight = 50.0;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define AuthorName @&quot;Warning&quot;</span><br><span class="line">#define thumbnailHeight 2</span><br></pre></td></tr></table></figure><p>若常量局限于某个实现文件，则以k开头；若在其他类中可见，则以类名为前缀。</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>当使用 enum 时，建议使用新的基础类型规范，因为它具有更强的类型检查和代码补全功能。现在 SDK 包含了一个宏来鼓励使用使用新的基础类型 - NS_ENUM()</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, WRGAdRequestState) &#123;</span><br><span class="line">WRGAdRequestStateInactive,</span><br><span class="line">WRGAdRequestStateLoading</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>凡是需要按位或操作来组合的枚举都应该使用NS_OPTIONS定义。</p><p>在switch语句中，总是习惯加上default语句，然而，若是用枚举来定义状态机，则最好不要有default分支。这样增加了一种状态，编译器会发出警告提示需要增加新的处理。</p><h2 id="位掩码"><a href="#位掩码" class="headerlink" title="位掩码"></a>位掩码</h2><p>当用到位掩码时，使用 NS_OPTIONS 宏。</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_OPTIONS(NSUInteger, WRGAdCategory) &#123;</span><br><span class="line">WRGAdCategoryAutos      = 1 &lt;&lt; 0,</span><br><span class="line">WRGAdCategoryJobs       = 1 &lt;&lt; 1,</span><br><span class="line">WRGAdCategoryRealState  = 1 &lt;&lt; 2,</span><br><span class="line">WRGAdCategoryTechnology = 1 &lt;&lt; 3</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>在对象外部访问实例变量的时候，总是应该通过属性来访问。除了几种特殊情况，在对象内部时读取数据时，应该直接访问实例变量，而写入数据时，则应该通过属性来写。这么写的目的是：</p><ul><li>直接访问实例变量的速度比较快，编译器所生成的代码会直接访问保存对象实例变量的内存。</li><li>直接访问实例变量时，不会调用其”设置方法”，这就绕过了为相关属性所定义的”内存管理语意”。</li><li>直接访问实例变量，不会触发KVO通知。具体有没有影响需要看具体行为。</li><li>通过属性来访问有助于排查错误，可以增加断点来监控对象行为。</li></ul><p>在初始化方法和dealloc方法以及getter和setter中，应该总是使用实例变量来读写数据。</p><p>使用惰性初始化方法时，使用属性来访问。</p><p>私有属性应该声明在类实现文件的延展（匿名的类目）中。</p><p>支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@interface Counter : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, retain) NSNumber *count;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">- (NSNumber *)count &#123;</span><br><span class="line">return _count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setCount:(NSNumber *)newCount &#123;</span><br><span class="line">    [newCount retain];</span><br><span class="line">    [_count release];</span><br><span class="line">    // Make the new assignment.</span><br><span class="line">    _count = newCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- init &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _count = [[NSNumber alloc] initWithInteger:0];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- initWithCount:(NSNumber *)startingCount &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _count = [startingCount copy];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    [_count release];</span><br><span class="line">    [super dealloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在继承父类的时候，如果本类中没有相关属性，在 init 方法中使用点语法，则会寻找父类属性，而使用实例变量则不会，可以很好的控制本类中的属性，检查属性。</p><p>有关在初始化方法和 dealloc 方法中使用访问器方法的信息，参见<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6" target="_blank" rel="noopener">这里</a>。</p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>因为 nil 解析为 NO，所以没有必要在条件中与它进行比较。永远不要直接和 YES 进行比较，因为 YES 被定义为 1，而 BOOL 可以多达 8 位。</p><p>这使得整个文件有更多的一致性和更大的视觉清晰度。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!someObject) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (someObject == nil) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 BOOL 来说, 这有两种用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (isAwesome)</span><br><span class="line">if (![someObject boolValue])</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ([someObject boolValue] == NO)</span><br><span class="line">if (isAwesome == YES) // 永远别这么做</span><br></pre></td></tr></table></figure><p>如果一个 BOOL 属性名称是一个形容词，属性可以省略 “is” 前缀，但为 get 访问器指定一个惯用的名字，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (assign, getter=isEditable) BOOL editable;</span><br></pre></td></tr></table></figure><p>内容和例子来自 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE" target="_blank" rel="noopener">Cocoa 命名指南</a> 。</p><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p>单例对象应该使用线程安全的模式创建共享的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)sharedInstance &#123;</span><br><span class="line">static id sharedInstance = nil;</span><br><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">sharedInstance = [[self alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将会预防<a href="http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html" target="_blank" rel="noopener">有时可能产生的许多崩溃</a>。</p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>将 <em>import</em> 和其他的文件名之间加一个空格。如果有一个以上的 import 语句，就对这些语句进行<a href="http://ashfurrow.com/blog/structuring-modern-objective-c/" target="_blank" rel="noopener">分组</a>。每个分组的注释是可选的。<br>注：对于模块使用 <a href="http://clang.llvm.org/docs/Modules.html#using-modules" target="_blank" rel="noopener">@import</a> 语法。</p><p>除了子类化或是协议之外，最好使用 <strong>@class</strong> 这种方式，避免过多的头文件引入。在引入协议的时候，如果不是连当前类也引入的情况下，将协议单独声明出来再引入。</p><h2 id="Xcode-工程"><a href="#Xcode-工程" class="headerlink" title="Xcode 工程"></a>Xcode 工程</h2><p>为了避免文件杂乱，物理文件应该保持和 Xcode 项目文件同步。Xcode 创建的任何组（group）都必须在文件系统有相应的映射。为了更清晰，代码不仅应该按照类型进行分组，也可以根据功能进行分组。</p><p>如果可以的话，尽可能一直打开 target Build Settings 中 “Treat Warnings as Errors” 以及一些<a href="http://boredzo.org/blog/archives/2009-11-07/warnings" target="_blank" rel="noopener">额外的警告</a>。如果你需要忽略指定的警告,使用 <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas" target="_blank" rel="noopener">Clang 的编译特性</a> 。</p><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>1、在 <em>extension</em> 和 <em>implementation</em> 之间添加一行空格。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@interface MyClass ()</span><br><span class="line"></span><br><span class="line">// Properties - empty line above and below</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation MyClass</span><br><span class="line"></span><br><span class="line">// Body - empty line above and below</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>2、在 <em>@end</em>之后添加一空行</p><p>3、使用 <em>pragma mark</em>之后添加一行空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (CGSize)intrinsicContentSize &#123;</span><br><span class="line">return CGSizeMake(12, 12);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Private</span><br><span class="line"></span><br><span class="line">- (void)setup &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、操作数学运算符时在运算符俩侧添加空格。一元运算符不用。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSInteger index = rand() % 50 + 25;</span><br><span class="line">index++;</span><br><span class="line">index += 1;</span><br><span class="line">index--;</span><br></pre></td></tr></table></figure><p>5、在进行逻辑判断时，在 <em>if</em> 之后添加一个空格，并在 <em>{</em> 之前添加一个空格。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (alpha + beta &lt;= 0) &amp;&amp; (kappa + phi &gt; 0) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、对于多参数的方法，除非方法签名大于或等于3行，否则不要换行。</p><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// blocks are easily readable</span><br><span class="line">[UIView animateWithDuration:1.0 animations:^&#123;</span><br><span class="line">   // something</span><br><span class="line">&#125; completion:^(BOOL finished) &#123;</span><br><span class="line">   // something</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>反对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// colon-aligning makes the block indentation wacky and hard to read</span><br><span class="line">[UIView animateWithDuration:1.0</span><br><span class="line"> animations:^&#123;</span><br><span class="line">                 // something</span><br><span class="line">             &#125;</span><br><span class="line">             completion:^(BOOL finished) &#123;</span><br><span class="line">                 // something</span><br><span class="line">             &#125;];</span><br></pre></td></tr></table></figure><p>7、不要在对象类型前和 <em>protocol</em>之间添加空格。</p><p>推荐：</p><pre><code>@property (nonatomic, weak) id&lt;SGOAnalyticsDelegate&gt; analyticsDelegate;</code></pre><p>反对：</p><pre><code>@property (nonatomic, weak) id &lt;SGOAnalyticsDelegate&gt; analyticsDelegate;    </code></pre><h2 id="其他Objective-C-风格指南"><a href="#其他Objective-C-风格指南" class="headerlink" title="其他Objective-C 风格指南"></a>其他Objective-C 风格指南</h2><p>如果感觉不太符合口味，可以看看下面的风格指南：</p><ul><li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html" target="_blank" rel="noopener">Objective-C 编程语言</a></li><li><a href="https://developer.apple.com/legacy/library/documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html" target="_blank" rel="noopener">Cocoa 基本原理指南</a></li><li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" target="_blank" rel="noopener">Cocoa 编码指南</a></li><li><a href="https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html" target="_blank" rel="noopener">iOS 应用编程指南</a></li><li><a href="https://github.com/NYTimes/objective-c-style-guide" target="_blank" rel="noopener">纽约时报 移动团队 Objective-C 规范指南</a></li><li><a href="https://github.com/RobotsAndPencils/objective-c-style-guide" target="_blank" rel="noopener">Robots &amp; Pencils Objective-C Style Guide</a></li></ul><p>其他</p><ul><li><a href="https://github.com/raywenderlich/objective-c-style-guide" target="_blank" rel="noopener">raywenderlich.com</a></li><li><a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml" target="_blank" rel="noopener">Google</a></li><li><a href="https://github.com/github/objective-c-style-guide" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://trac.adium.im/wiki/CodingStyle" target="_blank" rel="noopener">Adium</a></li><li><a href="https://gist.github.com/soffes/812796" target="_blank" rel="noopener">Sam Soffes</a></li><li><a href="http://cocoadevcentral.com/articles/000082.php" target="_blank" rel="noopener">CocoaDevCentral</a>)</li><li><a href="http://www.cimgf.com/zds-code-style-guide/" target="_blank" rel="noopener">Marcus Zarra</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;点语法&quot;&gt;&lt;a href=&quot;#点语法&quot; class=&quot;headerlink&quot; title=&quot;点语法&quot;&gt;&lt;/a&gt;点语法&lt;/h2&gt;&lt;p&gt;应该 &lt;strong&gt;始终&lt;/strong&gt; 使用点语法来访问或者修改属性，访问其他实例时首选括号（对比下面的属性）。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.idechao.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.idechao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>快速开始</title>
    <link href="http://www.idechao.com/2019/05/27/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.idechao.com/2019/05/27/快速开始/</id>
    <published>2019-05-27T09:42:42.684Z</published>
    <updated>2019-12-28T12:17:39.576Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="多个category语法"><a href="#多个category语法" class="headerlink" title="多个category语法"></a>多个category语法</h2><h3 id="子分类"><a href="#子分类" class="headerlink" title="子分类"></a>子分类</h3><p>下面的分类会将该分章放到 Java/Servlet这个分类下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Java</span><br><span class="line">  - Servlet</span><br></pre></td></tr></table></figure><p>同样的作用我们也可以这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: [Java, Servlet]</span><br></pre></td></tr></table></figure><p>上面两种方法最终效果一样，都是将文章放在了一个子分类的目录下，效果如图。</p><p> <img src="/images/quickstart-category.png" alt></p><h3 id="多个分类"><a href="#多个分类" class="headerlink" title="多个分类"></a>多个分类</h3><p>如果我们的要求是将文章同时分到多个不同的分类中呢，我们应该这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [Java]</span><br><span class="line">  - [Servlet]</span><br></pre></td></tr></table></figure><p>这样，就可以将上面的文章分类到 <code>Java</code> 和 <code>Servlet</code> 这两个不同的目录中了。</p><p>扩展一下，如果我们将其分类到 <code>Java/Servlet</code> 和 <code>Programming</code> 两个不同的目录下，我们应该如下写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [Java, Servlet]</span><br><span class="line">  - [Programming]</span><br></pre></td></tr></table></figure><h2 id="hexo引用图片"><a href="#hexo引用图片" class="headerlink" title="hexo引用图片"></a>hexo引用图片</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><h2 id="新建菜单menu存放归档文章"><a href="#新建菜单menu存放归档文章" class="headerlink" title="新建菜单menu存放归档文章"></a>新建菜单menu存放归档文章</h2><h3 id="如何新建文件到自定义目录menu下"><a href="#如何新建文件到自定义目录menu下" class="headerlink" title="如何新建文件到自定义目录menu下"></a>如何新建文件到自定义目录menu下</h3><p>相关链接：<a href="https://www.cnblogs.com/codebook/p/10312965.html" target="_blank" rel="noopener">https://www.cnblogs.com/codebook/p/10312965.html</a></p><p>新建的menu，里面设置路径的时候，要以category的方式来处理，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  Books: /categories/books/ || book # 这里是新增加的菜单</span><br><span class="line">  Movies: /movies/ || film</span><br><span class="line">  archives: /archives/ || archive</span><br></pre></td></tr></table></figure><p>新建的文件就可以直接放到books文件夹下，这样就应该直接展示出来了。</p><blockquote><p>这里网上有描述说是需要加上 <code>categories: books</code> 或者 <code>type: books</code>，不过我直接放到目录下，没有设置是没问题的，所以我这里就先不设置了，如果不展示可以尝试设置一下</p></blockquote><h3 id="隐藏自定义菜单menu的评论"><a href="#隐藏自定义菜单menu的评论" class="headerlink" title="隐藏自定义菜单menu的评论"></a>隐藏自定义菜单menu的评论</h3><p>默认的新建菜单，下面都带有评论，可以直接关闭。</p><p>打开自定义menu下的<code>index.md</code>文件，增加隐藏评论的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comments: false</span><br></pre></td></tr></table></figure><h2 id="category和tag理解"><a href="#category和tag理解" class="headerlink" title="category和tag理解"></a>category和tag理解</h2><p>拿超市的货品来作例子: </p><ul><li>Category 就是不同货架</li><li>Label 好比是贴在商品上的描述信息标签</li><li>Tag 则可以是临时添加的标记，比如「废弃」、「价格过期」</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
